{
	"info": {
		"_postman_id": "2f396f45-a642-470e-ad6f-217824bef38e",
		"name": "HostedPaymentForm-QA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive ACH CREDIT",
			"item": [
				{
					"name": "ACH_CREDIT_WITHFEE_SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4bc9289f-ec34-4712-bfb6-fb4738d8ce8d",
								"exec": [
									"pm.environment.set(\"cryptogram\", \"\");\r",
									"pm.sendRequest({\r",
									"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body:{\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
									"            }\r",
									"}, function (err, res) {\r",
									"    console.log(res.json())\r",
									"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "709a82ba-65f0-46ef-8a01-798c85ea687e",
								"exec": [
									"var responseData = pm.response.json();\r",
									"var jsonReq = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(request.name+\": Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.globals.set(\"orderid\",jsonReq.orderId)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify OrderID is not null or empty\", function () {\r",
									"    pm.expect(responseData.data.orderId).not.to.be.null;\r",
									"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify Credit amount is appeared correctly.\", function () {\r",
									"    pm.expect(parseFloat(responseData.data.creditAmount)).equal(parseFloat(jsonReq.transactionAmount));\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify authResponse Status is pending\", function () {\r",
									"    pm.expect(responseData.data.authResponse).eql(\"Pending\");\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify reference number not to be empty\", function () {\r",
									"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
									"    pm.expect(responseData.data.referenceNumber).to.match(/^[0-9]*$/);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
									"    pm.expect(responseData.isError).eql(false);\r",
									"    pm.expect(responseData.errorMessages).to.be.empty;\r",
									"    pm.expect(responseData.validationHasFailed).eql(false);\r",
									"    pm.expect(responseData.validationFailures).to.be.empty;\r",
									"    pm.expect(responseData.isSuccess).eql(true);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify this action is appeared correctly for ACH\", function () {\r",
									"    pm.expect(responseData.action).eql(\"AchCredit\");\r",
									"});\r",
									"\r",
									"/****************Schema Validation *****************/\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"\r",
									"\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"examples\": [\r",
									"        {\r",
									"            \"data\": {\r",
									"                \"orderId\": \"KN_ACH349_1606887172\",\r",
									"                \"authResponse\": \"Pending\",\r",
									"                \"creditAmount\": \"100.5\",\r",
									"                \"referenceNumber\": \"20541\"\r",
									"            },\r",
									"            \"isError\": false,\r",
									"            \"errorMessages\": [],\r",
									"            \"validationHasFailed\": false,\r",
									"            \"validationFailures\": [],\r",
									"            \"isSuccess\": true,\r",
									"            \"action\": \"AchCredit\"\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"isError\",\r",
									"        \"errorMessages\",\r",
									"        \"validationHasFailed\",\r",
									"        \"validationFailures\",\r",
									"        \"isSuccess\",\r",
									"        \"action\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"orderId\": \"KN_ACH349_1606887172\",\r",
									"                    \"authResponse\": \"Pending\",\r",
									"                    \"creditAmount\": \"100.5\",\r",
									"                    \"referenceNumber\": \"20541\"\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"orderId\",\r",
									"                \"authResponse\",\r",
									"                \"creditAmount\",\r",
									"                \"referenceNumber\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"orderId\": {\r",
									"                    \"$id\": \"#/properties/data/properties/orderId\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The orderId schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"KN_ACH349_1606887172\"\r",
									"                    ]\r",
									"                },\r",
									"                \"authResponse\": {\r",
									"                    \"$id\": \"#/properties/data/properties/authResponse\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The authResponse schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"Pending\"\r",
									"                    ]\r",
									"                },\r",
									"                \"creditAmount\": {\r",
									"                    \"$id\": \"#/properties/data/properties/creditAmount\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The creditAmount schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"100.5\"\r",
									"                    ]\r",
									"                },\r",
									"                \"referenceNumber\": {\r",
									"                    \"$id\": \"#/properties/data/properties/referenceNumber\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The referenceNumber schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"20541\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        },\r",
									"        \"isError\": {\r",
									"            \"$id\": \"#/properties/isError\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isError schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"errorMessages\": {\r",
									"            \"$id\": \"#/properties/errorMessages\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The errorMessages schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/errorMessages/items\"\r",
									"            }\r",
									"        },\r",
									"        \"validationHasFailed\": {\r",
									"            \"$id\": \"#/properties/validationHasFailed\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The validationHasFailed schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"validationFailures\": {\r",
									"            \"$id\": \"#/properties/validationFailures\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The validationFailures schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/validationFailures/items\"\r",
									"            }\r",
									"        },\r",
									"        \"isSuccess\": {\r",
									"            \"$id\": \"#/properties/isSuccess\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isSuccess schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                true\r",
									"            ]\r",
									"        },\r",
									"        \"action\": {\r",
									"            \"$id\": \"#/properties/action\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The action schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"AchCredit\"\r",
									"            ]\r",
									"        \r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"        };\r",
									" \r",
									"pm.test(request.name+\": Verify the actual response schema matched with expected schema\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
							"host": [
								"{{EndPoint}}"
							],
							"path": [
								"secure",
								"RestGw",
								"Gateway",
								"Transaction",
								"AchCredit"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative ACH CREDIT Copy",
			"item": [
				{
					"name": "Country Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Country",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d047c1fa-60b9-4cb5-9e8f-37b3e11d362b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e9b87a67-51a8-48fe-9769-6c36d00ed403",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).equal(\"Pending\");\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Country as numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "310b530c-2e4c-4f3e-a865-a50884ea30ec",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2922424c-e92c-4169-bf73-979e6f8d80ed",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify success response should not appear when country passed to the request as numeric value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed to the request as numeric value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Country should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":{{OwnerCity}},\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"1234\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Country with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "162cbb44-0ad7-45ee-adcc-1cb56ccaecd3",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53a9beb1-0f40-41a4-a2be-a0bd6059721d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).equal(\"Pending\");\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"             \"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_Credit_WITHFEE Country - Shortcode validation Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aba28c1c-4c95-4492-9088-363c6d72bb1e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cdfb225d-bfbd-49e0-b1b2-09cfc40e49f4",
										"exec": [
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify country is passed with its shortcode(2 digit)\", function () {\r",
											"   var abbr= jsonReq.ownerCountry;\r",
											"    pm.expect(abbr).lengthOf(2)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when country passed with not in Shortcode format \", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when when country passed with not in Shortcode format\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Country not displayed with its short code\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"United States\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "State Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty State",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09f65867-1bf5-4554-b4dc-9ea350158713",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "983a32e7-e934-4115-ae3b-739d96ff8a71",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify success response should  not appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty State as numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f514c15f-3ee7-4373-a9e4-f638448298f1",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "74689650-5de1-41c5-9bb1-1ac1c3e092b1",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify success response should not appear when state passed with numeric value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"State should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"12\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty State with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9b0d6f0-7e3d-43a2-96dd-8140906df2b5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7cca13bd-6539-4086-9f94-8fdf46baf63e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"                 \",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE State - Shortcode validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c419966b-fcb1-4d9a-acd5-a51cc0f41027",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b08d5e52-fb76-4a41-9d40-b61387308080",
										"exec": [
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"var responseData = pm.response.json();\r",
											"//var jsonReq = (pm.request.body).toJSON();\r",
											"\r",
											"pm.test(request.name+\":  Verify state is passed with its shortcode(2 digit)\", function () {\r",
											"   var abbr= jsonReq.ownerState;\r",
											"    pm.expect(abbr).lengthOf(2)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when state passed with not in shortcode format.\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed  with not in shortcode format.\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State not displayed with its short code\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"New Zealand\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "City Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty City",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec7e1dc9-90da-48ef-9855-445b4acfe282",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffb6dcd9-f29f-4ffc-8cab-31534ef791bc",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE City as Numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7ba7e7b8-ab16-4f57-aaa6-a3e4e0f01797",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bdcc2ec6-6bac-4a7c-b2c5-ae1a7c9b94fd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city passed with numeric value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with numeric value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"123456789\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_Credit_WITHFEE Empty City with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c9bfe48-63f9-4637-b4e4-3355da670f3c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b9acec29-5acd-418a-ab8c-29ff1b25e582",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"             \",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE City - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf088bf3-e962-4324-b989-3da2c2734b01",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e3d3bb4-f5c5-4e0b-8858-6387ca45a370",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city reached its maximum characters limitation\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city reached its maximum characters limitation\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City exceeds limit of 100 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu North Island, New Zealand \",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Zipcode Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Zipcode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "899fd47f-d0f2-4bba-87cc-42e67bdaa80e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3a20761c-870d-45a4-a92c-c5c90860af69",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Zipcode with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7ffb0002-bdf3-4d07-9cc7-65d58f3ab889",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5b48048-7e06-43e0-8b39-5421b4981df9",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"      \",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Zipcode  - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35dd9909-424b-4d1c-a4c7-a679e0333787",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5e7cee42-6111-4a16-9617-5be74cf0402f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when zipcode  entered with more than 10 character\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode entered with more than 10 character\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code exceeds limit of 10 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"1234567-12345\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Street Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Street 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85e0202b-c513-4996-a572-068683619c5d",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "572e7813-bafb-4925-99bd-15d974e6784a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Street is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Street 1 with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb6d67d0-3565-4929-8247-5b49857f2484",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0e2fe406-dc96-42e8-a2ce-82af78a6586f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Street is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"                   \",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Name Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "459ebc89-9782-4399-b82d-48c072fcd802",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "44aba210-229b-4d4f-a2f8-cbe4878bb7ce",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Name with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4276b03-1234-48c4-a2db-fe8a0045aaac",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bb47c7c-555c-4d91-a885-87b47c10a716",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"                  \",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cryptogram Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Cryptogram Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a593ef09-3cbc-41db-972f-a65378e32a12",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7fde3e8-85a9-47ed-ab33-2d9179488253",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when already used Cryptogram passed to this request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify errorMessages is appeared when already used Cryptogram passed to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Cryptogram Invalid Transaction Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cde61c31-04bb-476c-9861-ffd7874f2aeb",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "109a1638-7a87-4544-bac8-db28b8628320",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when Debit Transaction type passed to Credit request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when Debit Transaction type passed to Credit request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Cryptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d78bb09e-dfec-4f33-a83f-e5156c4a1e0f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c01fb830-fbad-4a4e-b516-f6ca62993e2c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when cryptogram passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when cryptogram passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Routing Number is required.\");\r",
											"    pm.expect(responseData.validationFailures[1].message).contains(\"Account Number is required.\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Incorrect Cyptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c827cadc-8568-4464-b28c-322eceef5637",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8863a547-2473-46d5-8ea4-93d9acf15529",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response should not appear when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"1234567890ASHHHHHHHHKL\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Incorrect TranscenterID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2777ec66-1458-4ff2-be62-5b7d1410670b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8c44697-4506-4ae5-b08b-5b2d98f29cbd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when without fee transcenterid passed to with fee request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when without fee transcenterid passed to with fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Incorrect ProcessorId(W/O Fee)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a90d9697-1dc1-4ff0-b104-83a1f8030057",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ea7759c-c8ad-4a4a-80ba-2ad9e1be5edd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when without fee processor id passed to with fee request \", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when without fee processor id passed to with fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_Credit_WITHFEE Incorrect ProcessorId Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d093b6c0-3d37-4e9e-ad46-bf2ec2551351",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf3a0c2d-d026-4a0c-b4a8-d5ad8d8a30ca",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when credit processor id passed  to ACH request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when credit processor id passed  to ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Amount Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Amount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c79032e7-12d7-4a40-9290-970258574473",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76021fec-156e-45bf-b484-d44d3bc1ac4c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Amount with emptyspace",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "933ac20b-0bf2-4108-8b3a-2b285cb646ad",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d110cfa-07c6-4049-8080-97490cd31fd5",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"              \",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Amount contains String",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "770c1941-8f14-4f51-a4f7-11405bc17381",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f576c38-e900-4d75-968b-d82aa30e95bb",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify  success response should not appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value. Must be all numbers and two decimal digits max.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"100.00TEST\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Amount in Minus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e710dfc-787f-43c3-8897-9798d52bd7a2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e79c39e-e81a-49cf-81a8-20fcdffc8679",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"-10.00\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Amount in Numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0545e9d-8590-4185-bfdc-44a3512d1574",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "323706b4-a477-41d7-98b8-b483bddb4590",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify OrderID is not null or empty\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.null;\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify Credit amount is appeared correctly.\", function () {\r",
											"    pm.expect(parseFloat(responseData.data.creditAmount)).equal(parseFloat(jsonReq.transactionAmount));\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify authResponse Status\", function () {\r",
											"    pm.expect(responseData.data.authResponse).eql(\"Pending\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify reference number not to be empty\", function () {\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.match(/^[0-9]*$/);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"    pm.expect(responseData.errorMessages).to.be.empty;\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.validationFailures).to.be.empty;\r",
											"    pm.expect(responseData.isSuccess).eql(true);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this action is appeared correctly for ACH\", function () {\r",
											"    pm.expect(responseData.action).eql(\"AchCredit\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": 500,\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Account Type Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Account Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2850f6e-66c4-4e48-abaa-73eeaab84d83",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a013daf-a446-4f7d-a6f1-d3ec571c537d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when account type is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Account Type is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Account Type Other than Credit/Saving",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18ee0f53-c423-4761-afd4-388c0adccf34",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ef2fdb6-6103-4d4d-9d0b-5e16cef5325b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when Account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Invalid Account type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"Credit\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Category Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Category Text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "906565f9-30b4-4992-9e92-e376f022186a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "855ab4e6-79e3-441f-8e28-d6c7c6c6c9b8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when Category text passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when category text is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Category Text  with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "49c61059-05ab-4ac6-8ed8-15abdb602129",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f96ec33-e47a-4f75-b015-bb0c5b697b41",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when Category text passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when category text is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"          \",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Invalid category validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e67b1d7-1091-4216-8875-fd0ddc348c1c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b958e0eb-418e-4416-b730-06696aedbba4",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when invalid category text passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid category text is passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"has not been created yet. You must create the category prior to processing a transaction with it.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"Testing\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Category Text - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9240be8f-09cb-44a2-8f4f-09c88b41cee2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da764ee9-26fb-4c9e-a3ec-decc9bab09cb",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when category reached its maximum character limitation\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared  when category reached its maximum character limitation\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category exceeds limit of 23 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\" TestingTestingTesting Testing\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Merchant Key Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE  Empty Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7d81b797-0fd8-49e4-8559-18653bde94c2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "afc44f53-80ce-432a-99e5-56b737af0e1f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Invalid Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4388715a-9822-4657-ab5b-e81fbc273b7b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d2d23c3-4b19-4824-88ac-c152d2eafc65",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"12312454564564654\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE W/O Fee merchant key to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e5e2dab8-9171-4369-b339-424bce9dbd14",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "228d8d2a-9b61-4a57-8e10-81e81df96d00",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Without fee merchant key passed to with key\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Processor ID Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19b51a0a-6035-4da2-bc61-190f5795f9d2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e14e4d16-1702-4f9c-a32a-7d8bb62c5c7c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Invalid  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "013b11a2-c915-4acc-9f46-89bc57db2821",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0eef85ea-000e-44dc-8ab9-3424373c5bfd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"123123\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE W/O Fee Processor ID to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7f2adadf-b354-48ae-b108-5a9ddc17b54e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "19509a97-5e3c-4561-a8a3-b87129696e53",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when wihout fee processor id passed for Fee API\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Credit Fee Processor passed to ACH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be750a5f-ca36-47ce-8247-7db1ec9d9839",
										"exec": [
											"pm.sendRequest({\r",
											"    url:\"https://secure-qa.goemerchant.com/secure/PaymentHostedForm/v3/GenerateAchCryptogram\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "68701141-e3f0-4fa1-975c-b45980131a3f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when credit processor id passed to ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Invalid Account Type For Transaction\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"187814\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OrderId Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fff45e78-6d51-429d-9471-01fea7777e64",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f3a24da-ec2a-48ce-875a-fbc9af83318c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when orderid passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when order id passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Order Id is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Auto Generate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9fc147a4-8d2e-45d6-86c7-a52136a53126",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3090c3db-0429-48eb-b8b1-7b0b01723a6d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).lengthOf(18);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"true\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Auto id generation though manually order id set.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94c5b807-0981-4223-8b21-6afbf0b396e1",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f4eb4e24-f561-4b67-a08b-7168aff82014",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).lengthOf(18);\r",
											"    pm.expect(responseData.data.orderId).to.match(/^[0-9]*$/);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"true\",\r\n    \"orderIdIsUnique\":\"false\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Duplicate order id allow when it set as TRUE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a60a2e0a-906e-49a2-a3f3-43ff247bbf7e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f9967524-ac5b-4552-ac7f-404645cb62b2",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when already exists order id is passed when the flag set as true\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when already exists order id is passed when the flag set as true\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Order Id is not unique\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"{{orderid}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Duplicate order id allow when it set as FALSE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb89dd50-e419-49c3-aaf4-f5ba4f0c28d4",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8afc2f9d-bc49-4a0f-816f-2ca85e2a4dba",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).eql(jsonReq.orderId)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"true\",\r\n\t\"orderIdIsUnique\": \"false\",\r\n\t\"orderId\": \"{{orderid}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99de9cb9-07b7-4a44-86fe-548a9dbc6a9d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "435aa514-f0e0-4217-975a-cc016149a653",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}