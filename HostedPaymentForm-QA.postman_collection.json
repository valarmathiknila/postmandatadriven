{
	"info": {
		"_postman_id": "b8e0d69b-eeec-4988-9888-aaa9179559f4",
		"name": "HostedPaymentForm-QA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive ACH DEBIT",
			"item": [
				{
					"name": "ACH_DEBIT_WITHFEE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61b6b243-b44c-45b0-a9ce-c39a7921a5de",
								"exec": [
									"pm.sendRequest({\r",
									"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body:{\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
									"            }\r",
									"}, function (err, res) {\r",
									"    console.log(res.json())\r",
									"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6d23691-6088-4e89-acbd-56467b159ca4",
								"exec": [
									"var responseData = pm.response.json();\r",
									"var jsonReq = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(request.name+\":Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.globals.set(\"orderid\",jsonReq.orderId)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(request.name+\"Verify OrderID is not null or empty\", function () {\r",
									"    pm.expect(responseData.data.orderId).not.to.be.null;\r",
									"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify hasFee column displayed correctly\", function () {\r",
									"   if(pm.globals.get(\"ACHAmountEnabled\")==1)\r",
									"   pm.expect(responseData.data.hasFee).eql(true);\r",
									"   else\r",
									"   pm.expect(responseData.data.hasFee).eql(false);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify CVV\", function () {\r",
									"    pm.expect(responseData.data.cVV2).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify authResponse Status\", function () {\r",
									"    pm.expect(responseData.data.authResponse).eql(\"Pending\");\r",
									"    pm.expect(responseData.data.fee.authResponse).eql(\"Pending\");\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify authcode is empty\", function () {\r",
									"    pm.expect(responseData.data.authCode).to.be.empty;\r",
									"    pm.expect(responseData.data.fee.authCode).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify reference number is identical and not to be empty\", function () {\r",
									"    pm.expect(responseData.data.referenceNumber).not.eql(responseData.data.fee.referenceNumber);\r",
									"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
									"    pm.expect(responseData.data.fee.referenceNumber).not.to.be.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify partial details are appeared correctly in success response\", function () {\r",
									"    pm.expect(responseData.data.fee.isPartial).eql(false);\r",
									"    pm.expect(responseData.data.fee.partialId).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
									"    pm.expect(responseData.isError).eql(false);\r",
									"    pm.expect(responseData.errorMessages).to.be.empty;\r",
									"    pm.expect(responseData.validationHasFailed).eql(false);\r",
									"    pm.expect(responseData.validationFailures).to.be.empty;\r",
									"    pm.expect(responseData.isSuccess).eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify this action is appeared correctly for ACH\", function () {\r",
									"    pm.expect(responseData.action).eql(\"AchDebit\");\r",
									"});\r",
									"\r",
									"/****************Schema Validation *****************/\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {        \r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"examples\": [\r",
									"        {\r",
									"            \"data\": {\r",
									"                \"orderId\": \"KN_ACH134_1606886598\",\r",
									"                \"hasFee\": true,\r",
									"                \"cVV2\": \"\",\r",
									"                \"authResponse\": \"Pending\",\r",
									"                \"authCode\": \"\",\r",
									"                \"avsResponse\": \"\",\r",
									"                \"referenceNumber\": \"20537\",\r",
									"                \"fee\": {\r",
									"                    \"authResponse\": \"Pending\",\r",
									"                    \"authCode\": \"\",\r",
									"                    \"referenceNumber\": \"20538\",\r",
									"                    \"isPartial\": false,\r",
									"                    \"partialId\": \"\",\r",
									"                    \"originalFullAmount\": 5.0,\r",
									"                    \"partialAmountApproved\": 0.0,\r",
									"                    \"avsResponse\": \"\",\r",
									"                    \"cvv2Response\": \"\"\r",
									"                }\r",
									"            },\r",
									"            \"isError\": false,\r",
									"            \"errorMessages\": [],\r",
									"            \"validationHasFailed\": false,\r",
									"            \"validationFailures\": [],\r",
									"            \"isSuccess\": true,\r",
									"            \"action\": \"AchDebit\"\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"isError\",\r",
									"        \"errorMessages\",\r",
									"        \"validationHasFailed\",\r",
									"        \"validationFailures\",\r",
									"        \"isSuccess\",\r",
									"        \"action\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"orderId\": \"KN_ACH134_1606886598\",\r",
									"                    \"hasFee\": true,\r",
									"                    \"cVV2\": \"\",\r",
									"                    \"authResponse\": \"Pending\",\r",
									"                    \"authCode\": \"\",\r",
									"                    \"avsResponse\": \"\",\r",
									"                    \"referenceNumber\": \"20537\",\r",
									"                    \"fee\": {\r",
									"                        \"authResponse\": \"Pending\",\r",
									"                        \"authCode\": \"\",\r",
									"                        \"referenceNumber\": \"20538\",\r",
									"                        \"isPartial\": false,\r",
									"                        \"partialId\": \"\",\r",
									"                        \"originalFullAmount\": 5.0,\r",
									"                        \"partialAmountApproved\": 0.0,\r",
									"                        \"avsResponse\": \"\",\r",
									"                        \"cvv2Response\": \"\"\r",
									"                    }\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"orderId\",\r",
									"                \"hasFee\",\r",
									"                \"cVV2\",\r",
									"                \"authResponse\",\r",
									"                \"authCode\",\r",
									"                \"avsResponse\",\r",
									"                \"referenceNumber\",\r",
									"                \"fee\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"orderId\": {\r",
									"                    \"$id\": \"#/properties/data/properties/orderId\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The orderId schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"KN_ACH134_1606886598\"\r",
									"                    ]\r",
									"                },\r",
									"                \"hasFee\": {\r",
									"                    \"$id\": \"#/properties/data/properties/hasFee\",\r",
									"                    \"type\": \"boolean\",\r",
									"                    \"title\": \"The hasFee schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": false,\r",
									"                    \"examples\": [\r",
									"                        true\r",
									"                    ]\r",
									"                },\r",
									"                \"cVV2\": {\r",
									"                    \"$id\": \"#/properties/data/properties/cVV2\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The cVV2 schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"\"\r",
									"                    ]\r",
									"                },\r",
									"                \"authResponse\": {\r",
									"                    \"$id\": \"#/properties/data/properties/authResponse\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The authResponse schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"Pending\"\r",
									"                    ]\r",
									"                },\r",
									"                \"authCode\": {\r",
									"                    \"$id\": \"#/properties/data/properties/authCode\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The authCode schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"\"\r",
									"                    ]\r",
									"                },\r",
									"                \"avsResponse\": {\r",
									"                    \"$id\": \"#/properties/data/properties/avsResponse\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The avsResponse schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"\"\r",
									"                    ]\r",
									"                },\r",
									"                \"referenceNumber\": {\r",
									"                    \"$id\": \"#/properties/data/properties/referenceNumber\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The referenceNumber schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"20537\"\r",
									"                    ]\r",
									"                },\r",
									"                \"fee\": {\r",
									"                    \"$id\": \"#/properties/data/properties/fee\",\r",
									"                    \"type\": \"object\",\r",
									"                    \"title\": \"The fee schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": {},\r",
									"                    \"examples\": [\r",
									"                        {\r",
									"                            \"authResponse\": \"Pending\",\r",
									"                            \"authCode\": \"\",\r",
									"                            \"referenceNumber\": \"20538\",\r",
									"                            \"isPartial\": false,\r",
									"                            \"partialId\": \"\",\r",
									"                            \"originalFullAmount\": 5.0,\r",
									"                            \"partialAmountApproved\": 0.0,\r",
									"                            \"avsResponse\": \"\",\r",
									"                            \"cvv2Response\": \"\"\r",
									"                        }\r",
									"                    ],\r",
									"                    \"required\": [\r",
									"                        \"authResponse\",\r",
									"                        \"authCode\",\r",
									"                        \"referenceNumber\",\r",
									"                        \"isPartial\",\r",
									"                        \"partialId\",\r",
									"                        \"originalFullAmount\",\r",
									"                        \"partialAmountApproved\",\r",
									"                        \"avsResponse\",\r",
									"                        \"cvv2Response\"\r",
									"                    ],\r",
									"                    \"properties\": {\r",
									"                        \"authResponse\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/authResponse\",\r",
									"                            \"type\": \"string\",\r",
									"                            \"title\": \"The authResponse schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": \"\",\r",
									"                            \"examples\": [\r",
									"                                \"Pending\"\r",
									"                            ]\r",
									"                        },\r",
									"                        \"authCode\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/authCode\",\r",
									"                            \"type\": \"string\",\r",
									"                            \"title\": \"The authCode schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": \"\",\r",
									"                            \"examples\": [\r",
									"                                \"\"\r",
									"                            ]\r",
									"                        },\r",
									"                        \"referenceNumber\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/referenceNumber\",\r",
									"                            \"type\": \"string\",\r",
									"                            \"title\": \"The referenceNumber schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": \"\",\r",
									"                            \"examples\": [\r",
									"                                \"20538\"\r",
									"                            ]\r",
									"                        },\r",
									"                        \"isPartial\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/isPartial\",\r",
									"                            \"type\": \"boolean\",\r",
									"                            \"title\": \"The isPartial schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": false,\r",
									"                            \"examples\": [\r",
									"                                false\r",
									"                            ]\r",
									"                        },\r",
									"                        \"partialId\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/partialId\",\r",
									"                            \"type\": \"string\",\r",
									"                            \"title\": \"The partialId schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": \"\",\r",
									"                            \"examples\": [\r",
									"                                \"\"\r",
									"                            ]\r",
									"                        },\r",
									"                        \"originalFullAmount\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/originalFullAmount\",\r",
									"                            \"type\": \"number\",\r",
									"                            \"title\": \"The originalFullAmount schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": 0.0,\r",
									"                            \"examples\": [\r",
									"                                5.0\r",
									"                            ]\r",
									"                        },\r",
									"                        \"partialAmountApproved\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/partialAmountApproved\",\r",
									"                            \"type\": \"number\",\r",
									"                            \"title\": \"The partialAmountApproved schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": 0.0,\r",
									"                            \"examples\": [\r",
									"                                0.0\r",
									"                            ]\r",
									"                        },\r",
									"                        \"avsResponse\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/avsResponse\",\r",
									"                            \"type\": \"string\",\r",
									"                            \"title\": \"The avsResponse schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": \"\",\r",
									"                            \"examples\": [\r",
									"                                \"\"\r",
									"                            ]\r",
									"                        },\r",
									"                        \"cvv2Response\": {\r",
									"                            \"$id\": \"#/properties/data/properties/fee/properties/cvv2Response\",\r",
									"                            \"type\": \"string\",\r",
									"                            \"title\": \"The cvv2Response schema\",\r",
									"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                            \"default\": \"\",\r",
									"                            \"examples\": [\r",
									"                                \"\"\r",
									"                            ]\r",
									"                        }\r",
									"                    },\r",
									"                    \"additionalProperties\": true\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        },\r",
									"        \"isError\": {\r",
									"            \"$id\": \"#/properties/isError\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isError schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"errorMessages\": {\r",
									"            \"$id\": \"#/properties/errorMessages\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The errorMessages schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/errorMessages/items\"\r",
									"            }\r",
									"        },\r",
									"        \"validationHasFailed\": {\r",
									"            \"$id\": \"#/properties/validationHasFailed\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The validationHasFailed schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"validationFailures\": {\r",
									"            \"$id\": \"#/properties/validationFailures\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The validationFailures schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/validationFailures/items\"\r",
									"            }\r",
									"        },\r",
									"        \"isSuccess\": {\r",
									"            \"$id\": \"#/properties/isSuccess\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isSuccess schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                true\r",
									"            ]\r",
									"        },\r",
									"        \"action\": {\r",
									"            \"$id\": \"#/properties/action\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The action schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"AchDebit\"\r",
									"            ]\r",
									"        \r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"\r",
									"        };\r",
									" \r",
									"pm.test(request.name+\": Verify the actual response schema matched with expected schema\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n    \"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"autoGenerateOrderId\": \"false\",\r\n    \"orderIdIsUnique\": \"true\",\r\n    \"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    \"accountType\": \"C\",\r\n    \"categoryText\": \"Web\",\r\n    \"transactionAmount\": \"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\": \"{{OwnerName}}\",\r\n    \"ownerStreet\": \"{{OwnerStreet}}\",\r\n    \"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n    \"ownerCity\": \"{{OwnerCity}}\",\r\n    \"ownerState\": \"{{OwnerState}}\",\r\n    \"ownerZip\": \"{{OwnerZip}}\",\r\n    \"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
							"host": [
								"{{EndPoint}}"
							],
							"path": [
								"secure",
								"RestGw",
								"Gateway",
								"Transaction",
								"AchDebit"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative ACH DEBIT",
			"item": [
				{
					"name": "Country Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Country",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1bdd067b-7aab-4e92-a498-2ab03abf23a0",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5212e48-029d-49bf-be6b-d50cbd400b23",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).equal(\"Pending\");\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Country as numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "699f59a3-6bee-41d5-affb-b234fd0844d2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "312f36bc-d9eb-4105-9a79-3b42aded5a82",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Country should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":{{OwnerCity}},\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"1234\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Country with emptyspace alone Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cab00aab-bd4f-4bd2-9b16-63b6fd6b9a2e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fb56a86d-f3ff-4251-856f-178260e7f9f0",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).equal(\"Pending\");\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"             \"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Country - Shortcode validation Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6b75a4f-e8d4-499d-9a76-b6305d00a1ea",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1b07133c-9cd7-4b71-ad5a-79b25d766fde",
										"exec": [
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify country is passed with its shortcode(2 digit)\", function () {\r",
											"   var abbr= jsonReq.ownerCountry;\r",
											"    pm.expect(abbr).lengthOf(2)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Country not displayed with its short code\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"United States\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "State Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty State",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c118fbbf-8d46-42a8-b716-53d67051e680",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c77deda-5d4c-4b66-9ac6-6a91d8992de3",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify whether success response is appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty State as numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7cb70465-f9f3-4b01-8999-50f2367f2226",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "542102a3-9708-4bce-b6ee-619a64e81dae",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify whether success response is appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"State should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"12\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty State with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b5f4ea8-6aa3-4aed-9324-00db05200032",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d8049d5-2128-4b19-965a-779465562f89",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"                 \",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE State - Shortcode validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bdcb45b2-d3cb-49cc-9a02-0807f3a8b770",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e050a9c9-43d9-4817-a101-cb7995e7fb62",
										"exec": [
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"var responseData = pm.response.json();\r",
											"//var jsonReq = (pm.request.body).toJSON();\r",
											"console.log(jsonReq);\r",
											"\r",
											"pm.test(request.name+\":  Verify state is passed with its shortcode(2 digit)\", function () {\r",
											"   var abbr= jsonReq.ownerState;\r",
											"    pm.expect(abbr).lengthOf(2)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State not displayed with its short code\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"New Zealand\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{{{OwnerCountry}}}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "City Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty City",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5347caf4-fef9-4520-8566-8ca9bdf74d66",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22a626f0-8888-4fa5-88c5-32e956291c6f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE City as Numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1892863-ad64-4ff9-b6e5-65f99edf2525",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f897c36-548a-4a63-ba28-858648b8852a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"123456789\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty City with emptyspace alone Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e02b630e-208a-41f4-8e79-fcfdd2efd057",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e3b83a85-d50c-41ad-ac90-179e58e56180",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"             \",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE City - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1fe7153a-6579-413d-a78d-49f66b21f7a6",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ed1be534-2830-4091-8381-bf5f2dd1961e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City exceeds limit of 100 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu North Island, New Zealand \",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Zipcode Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Zipcode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a99f0f29-53ac-4d40-96d7-d03e8fdc9dec",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "63636fe5-f806-4384-a340-4a0758d8d719",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Zipcode with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a26c9ed-99c9-4bf3-9234-b08e9e43eeab",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79a75a77-5d00-4174-bf6f-4b6b6875038e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"      \",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Zipcode  - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e6c4ca9-c9c8-43e0-9ef6-8dde1961995f",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05d014c8-c27a-4b77-861e-5309ab07983a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode entered with more than 10 character\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code exceeds limit of 10 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"1234567-12345\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Street Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Street 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed599536-54f6-4645-a23a-95ee20c7da63",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84d041c0-bb04-4c09-9c7e-8bc129b15ff2",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Street is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Street 1 with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d975c71-8898-4afd-b816-a549bd6dfa09",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e84b3ee6-501e-4836-b1e3-1e38732c18c8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Street is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"                   \",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Name Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9c240b7-83b4-4e48-a715-a7838a03bc2b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fe0c31d6-6d1e-47f2-aa1a-23d6806cc07d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Name with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a00b6726-408b-4bad-86ed-a42a61f5a21e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df9bcfd0-051f-4135-bac2-cc32d1935dd8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"                  \",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cryptogram Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Cryptogram Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9efbf3a-3093-4cbe-93bb-2933b4a0d3b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2b1b226-5c74-4b0e-81b7-da56bb5ac988",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Cryptogram Invalid Transaction Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e38a7bbb-b209-4248-b859-08cf99ca0b1f",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b670701e-7a28-4cda-a0e8-322f45142a40",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Cryptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4c9c72d-ca43-42f5-9a30-fa437d8b050a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c6c9340-7826-42dc-a633-938ce06ee768",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Routing Number is required.\");\r",
											"    pm.expect(responseData.validationFailures[1].message).contains(\"Account Number is required.\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Incorrect Cyptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a84c3721-7c6e-4106-8f47-c1f583bcf69d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f3c8841-6f11-405b-bf6e-6a44147d81d2",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"1234567890ASHHHHHHHHKL\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Incorrect TranscenterID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "480362ba-2572-41bb-82ab-af3082e35490",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":\"70391\",\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7831171-b21b-41ae-99d5-b69ae7534c06",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Incorrect ProcessorId(W/O Fee)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bc431c4-5ab1-4260-98a0-52887e16af5d",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":\"187928\",\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "674639b4-5c48-4d29-bbca-45965d359bd6",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Incorrect ProcessorId Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "103e1dcd-2895-4d57-9883-6d864b00d052",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":\"187814\",\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8e032e1-07ea-4dce-9425-37a10039c3d4",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Amount Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Amount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0229b58d-3963-4ef9-a817-860f34b23d45",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f0a661e-c011-43ce-a087-f83d88d191f7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Amount with emptyspace",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db00d881-eb1b-4e4a-bc27-b5e769b88f2a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "587d43b2-2a71-4e59-bad3-2837d4dca654",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"              \",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Amount contains String",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0137b85-b41a-4983-ba87-71179966023e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30adf694-377b-44cd-b41a-7d13e0a0d30e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value. Must be all numbers and two decimal digits max.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"100.00TEST\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Amount in Minus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10e69a8b-1372-4e40-9ad7-6661f7f0343d",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0072618f-ade1-43bb-9317-04c051bf2731",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"-10.00\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{{{OwnerCountry}}}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Amount in Numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3567b08a-87b4-46af-bc99-6317090493c3",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0ac9c8d6-79db-4832-975c-ddc6a63a4acd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify OrderID is not null or empty\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.null;\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify hasFee column displayed correctly\", function () {\r",
											"   if((pm.globals.get(\"ACHAmountEnabled\"))==1)\r",
											"   pm.expect(responseData.data.hasFee).eql(true);\r",
											"   else\r",
											"   pm.expect(responseData.data.hasFee).eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify CVV\", function () {\r",
											"    pm.expect(responseData.data.cVV2).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify authResponse Status\", function () {\r",
											"    pm.expect(responseData.data.authResponse).eql(\"Pending\");\r",
											"    pm.expect(responseData.data.fee.authResponse).eql(\"Pending\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify authcode is empty\", function () {\r",
											"    pm.expect(responseData.data.authCode).to.be.empty;\r",
											"    pm.expect(responseData.data.fee.authCode).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify reference number is identical and not to be empty\", function () {\r",
											"    pm.expect(responseData.data.referenceNumber).not.eql(responseData.data.fee.referenceNumber);\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"    pm.expect(responseData.data.fee.referenceNumber).not.to.be.empty;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"    pm.expect(responseData.errorMessages).to.be.empty;\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.validationFailures).to.be.empty;\r",
											"    pm.expect(responseData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":10.00,\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Account Type Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Account Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78759f55-bc8d-4eb4-b207-d5b1a76b08fe",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15204cfc-64b6-4485-ba24-824fe593d34d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when account type is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Account Type is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Account Type Other than Credit/Saving",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5834d44f-48f9-40d5-93d6-6ac9c0e0d10c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ae713cd-b812-4898-a632-4706ee489e97",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Invalid Account type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"None\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Category Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Category Text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75753249-46c7-48ab-a1fa-cbe7324c949c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be3d9e02-a470-4300-bd54-9cab2f44cffe",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when Category text passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when category text is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Empty Category Text  with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dca74b91-0c16-4871-ba5e-b7887bd993d4",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "141e1a39-a40a-47c7-b06a-b925e05ffffe",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when Category text passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when category text is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"          \",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Invalid category validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7127de0d-b32a-4994-9675-b4306ec92020",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4096cdd0-f1df-45a2-9bcc-8114a170a83a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when invalid category text passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid category text is passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"has not been created yet. You must create the category prior to processing a transaction with it.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"Testing\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Category Text - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0a274c67-b3ab-4ee1-979a-eecce6caa9d6",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "118fcd0d-42de-43ea-989f-c371e64f7051",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when invalid category text passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid category text is passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category exceeds limit of 23 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\" TestingTestingTesting Testing\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Merchant Key Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE  Empty Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2a9b74b-91aa-4e49-8532-14252e31ecc9",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d26b365e-cb55-4b30-ab53-a6d537ed4be8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Invalid Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f89d43fb-112b-4463-bb8c-d1fa9f74e824",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61366daa-4519-4d0a-8554-0bbfbc517277",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"12312454564564654\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE W/O Fee merchant key to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f92cf70-6e58-4ffd-a8c7-7471a1384e83",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4eea7938-0cec-48a8-8fe7-cdc19196cf86",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Processor ID Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8bf2b9ec-06a0-4ae9-8ae4-aa4b30cd35cb",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "513262e7-93f4-408a-a2e1-0a1e2d91918d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Invalid  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e336497-7b44-4ac6-bb10-d4d22aaae3c5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6aa5e320-4cfa-4be8-99b4-2b2c364d180e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"123123\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE W/O Fee Processor ID to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3ea28251-5f66-44ae-a550-e300047b9263",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "269554a3-d4e6-4f9e-b1a9-521803dcffec",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when wihout fee processor id passed for Fee API\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Credit Fee Processor passed to ACH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bb3c10-8bc4-4255-88a3-2c8d4c2e5415",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "667fb9aa-4079-4a95-bb9f-99e894b0a98a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when credit processor id passed to ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Invalid Account Type For Transaction\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OrderId Validation",
					"item": [
						{
							"name": "ACH_DEBIT_WITHFEE Empty Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "42ae7e59-5b32-45f8-97a8-79def6426aea",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e1e145e-24ac-4662-a41e-ee1352da86c2",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when orderid passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when order id passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Order Id is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Auto Generate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bd4013e5-578a-4f6e-8e1e-50161fa1be76",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc7aab60-c83d-41eb-bc64-13fc86ec149b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).lengthOf(18);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"true\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Auto id generation though manually order id set.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e52e5e08-116e-4492-8392-612c2e5fb6db",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "78bd3e9f-60fe-448a-9081-a09028997266",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).lengthOf(18);\r",
											"    pm.expect(responseData.data.orderId).to.match(/^[0-9]*$/);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"true\",\r\n    \"orderIdIsUnique\":\"false\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Duplicate order id allow when it set as TRUE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "821d282b-6b98-42c8-a8c9-424c59d6bf6c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c861605f-7036-48c6-bd9e-cdfeb2463b9f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when already exists order id is passed when the flag set as true\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when already exists order id is passed when the flag set as true\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Order Id is not unique\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"{{orderid}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_DEBIT_WITHFEE Duplicate order id allow when it set as FALSE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb892a2c-61f0-41e1-afdf-8a67149a40a5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dd2def4-7e9c-434c-a24c-aa815f9dbb38",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).eql(jsonReq.orderId)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"true\",\r\n\t\"orderIdIsUnique\": \"false\",\r\n\t\"orderId\": \"{{orderid}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchDebit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchDebit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1e6ac7e-09c2-43df-bb64-a0098298bceb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b30cd778-6463-4eec-b58d-d1d84563af1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive ACH CREDIT",
			"item": [
				{
					"name": "ACH_CREDIT_WITHFEE_SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4bc9289f-ec34-4712-bfb6-fb4738d8ce8d",
								"exec": [
									"pm.environment.set(\"cryptogram\", \"\");\r",
									"pm.sendRequest({\r",
									"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body:{\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
									"            }\r",
									"}, function (err, res) {\r",
									"    console.log(res.json())\r",
									"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "709a82ba-65f0-46ef-8a01-798c85ea687e",
								"exec": [
									"var responseData = pm.response.json();\r",
									"var jsonReq = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(request.name+\": Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.globals.set(\"orderid\",jsonReq.orderId)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify OrderID is not null or empty\", function () {\r",
									"    pm.expect(responseData.data.orderId).not.to.be.null;\r",
									"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify Credit amount is appeared correctly.\", function () {\r",
									"    pm.expect(parseFloat(responseData.data.creditAmount)).equal(parseFloat(jsonReq.transactionAmount));\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify authResponse Status is pending\", function () {\r",
									"    pm.expect(responseData.data.authResponse).eql(\"Pending\");\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify reference number not to be empty\", function () {\r",
									"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
									"    pm.expect(responseData.data.referenceNumber).to.match(/^[0-9]*$/);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
									"    pm.expect(responseData.isError).eql(false);\r",
									"    pm.expect(responseData.errorMessages).to.be.empty;\r",
									"    pm.expect(responseData.validationHasFailed).eql(false);\r",
									"    pm.expect(responseData.validationFailures).to.be.empty;\r",
									"    pm.expect(responseData.isSuccess).eql(true);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify this action is appeared correctly for ACH\", function () {\r",
									"    pm.expect(responseData.action).eql(\"AchCredit\");\r",
									"});\r",
									"\r",
									"/****************Schema Validation *****************/\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"\r",
									"\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"examples\": [\r",
									"        {\r",
									"            \"data\": {\r",
									"                \"orderId\": \"KN_ACH349_1606887172\",\r",
									"                \"authResponse\": \"Pending\",\r",
									"                \"creditAmount\": \"100.5\",\r",
									"                \"referenceNumber\": \"20541\"\r",
									"            },\r",
									"            \"isError\": false,\r",
									"            \"errorMessages\": [],\r",
									"            \"validationHasFailed\": false,\r",
									"            \"validationFailures\": [],\r",
									"            \"isSuccess\": true,\r",
									"            \"action\": \"AchCredit\"\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"isError\",\r",
									"        \"errorMessages\",\r",
									"        \"validationHasFailed\",\r",
									"        \"validationFailures\",\r",
									"        \"isSuccess\",\r",
									"        \"action\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"orderId\": \"KN_ACH349_1606887172\",\r",
									"                    \"authResponse\": \"Pending\",\r",
									"                    \"creditAmount\": \"100.5\",\r",
									"                    \"referenceNumber\": \"20541\"\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"orderId\",\r",
									"                \"authResponse\",\r",
									"                \"creditAmount\",\r",
									"                \"referenceNumber\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"orderId\": {\r",
									"                    \"$id\": \"#/properties/data/properties/orderId\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The orderId schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"KN_ACH349_1606887172\"\r",
									"                    ]\r",
									"                },\r",
									"                \"authResponse\": {\r",
									"                    \"$id\": \"#/properties/data/properties/authResponse\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The authResponse schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"Pending\"\r",
									"                    ]\r",
									"                },\r",
									"                \"creditAmount\": {\r",
									"                    \"$id\": \"#/properties/data/properties/creditAmount\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The creditAmount schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"100.5\"\r",
									"                    ]\r",
									"                },\r",
									"                \"referenceNumber\": {\r",
									"                    \"$id\": \"#/properties/data/properties/referenceNumber\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The referenceNumber schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\",\r",
									"                    \"examples\": [\r",
									"                        \"20541\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        },\r",
									"        \"isError\": {\r",
									"            \"$id\": \"#/properties/isError\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isError schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"errorMessages\": {\r",
									"            \"$id\": \"#/properties/errorMessages\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The errorMessages schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/errorMessages/items\"\r",
									"            }\r",
									"        },\r",
									"        \"validationHasFailed\": {\r",
									"            \"$id\": \"#/properties/validationHasFailed\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The validationHasFailed schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"validationFailures\": {\r",
									"            \"$id\": \"#/properties/validationFailures\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The validationFailures schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/validationFailures/items\"\r",
									"            }\r",
									"        },\r",
									"        \"isSuccess\": {\r",
									"            \"$id\": \"#/properties/isSuccess\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isSuccess schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                true\r",
									"            ]\r",
									"        },\r",
									"        \"action\": {\r",
									"            \"$id\": \"#/properties/action\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The action schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"AchCredit\"\r",
									"            ]\r",
									"        \r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"        };\r",
									" \r",
									"pm.test(request.name+\": Verify the actual response schema matched with expected schema\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
							"host": [
								"{{EndPoint}}"
							],
							"path": [
								"secure",
								"RestGw",
								"Gateway",
								"Transaction",
								"AchCredit"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative ACH CREDIT",
			"item": [
				{
					"name": "Country Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Country",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85d8ca64-a548-48eb-9a84-aad32fdb2371",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5d4e8a5-aa4f-4115-8f0a-064e1fb8f1b7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).equal(\"Pending\");\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Country as numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c163cbd5-54b8-46f0-a87b-5715dab29193",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13fafa21-cf36-49e2-ba77-72140c3f0099",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify success response should not appear when country passed to the request as numeric value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed to the request as numeric value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Country should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":{{OwnerCity}},\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"1234\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Country with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c2f82df0-7b09-4a09-9ae9-237eba45921d",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c744e3b5-a82a-4a6b-8b55-ffca0efe8fce",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).equal(\"Pending\");\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"             \"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_Credit_WITHFEE Country - Shortcode validation Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6ce0155-aa3e-42cb-9868-60c58a7e1a0a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fdc5594d-d584-468a-a279-fa3aa151895b",
										"exec": [
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify country is passed with its shortcode(2 digit)\", function () {\r",
											"   var abbr= jsonReq.ownerCountry;\r",
											"    pm.expect(abbr).lengthOf(2)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when country passed with not in Shortcode format \", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when when country passed with not in Shortcode format\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Country not displayed with its short code\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"United States\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "State Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty State",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f9eee87-03ae-4158-b079-577aa58bbabd",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "080d5671-1616-4f67-9e05-9322dae23671",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify success response should  not appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty State as numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1020d247-cd20-4ed3-b1a4-fe8cc6638d07",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "517d94c2-a4b9-46f9-84fa-bfc0bec7b336",
										"exec": [
											"var responseData = pm.response.json();\r",
											"pm.test(request.name+\": Verify success response should not appear when state passed with numeric value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"State should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"12\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty State with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb4f3849-8e6a-418a-8682-8f1d6aeeb3b9",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0f6180c8-911f-438b-afcf-cc47f122b8b7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"                 \",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE State - Shortcode validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32dfc5b2-d6cc-4d2b-a496-138f9dde4924",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42f3d1b2-299c-4677-b5dd-033a90170f3d",
										"exec": [
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"var responseData = pm.response.json();\r",
											"//var jsonReq = (pm.request.body).toJSON();\r",
											"\r",
											"pm.test(request.name+\":  Verify state is passed with its shortcode(2 digit)\", function () {\r",
											"   var abbr= jsonReq.ownerState;\r",
											"    pm.expect(abbr).lengthOf(2)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when state passed with not in shortcode format.\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when state passed  with not in shortcode format.\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"State not displayed with its short code\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"New Zealand\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "City Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty City",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eea3cf0e-f7f6-4423-85f1-7b5896de7bd8",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e67a6be-cdef-4ffc-b4da-4895f5e733fd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE City as Numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "078bc749-8a73-476b-9118-8c3dcc9ebb72",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea2ce401-b5d1-4ee5-928b-7785ffa3d286",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city passed with numeric value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with numeric value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City should not be numeric\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"123456789\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_Credit_WITHFEE Empty City with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4606d55e-bcd3-4435-a87d-e8040bd6987e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62ab3605-45fe-4806-bbbf-5101ed22364b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"             \",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE City - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9af5d9a-f949-4820-a402-80c7ba87b49a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e231f475-3c87-4827-aa1b-c7f15e88ae4f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when city reached its maximum characters limitation\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when city reached its maximum characters limitation\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"City exceeds limit of 100 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu North Island, New Zealand \",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Zipcode Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Zipcode",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e699d696-5eae-4a2d-8824-e77ff50308a0",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a4992857-0608-4972-857f-529c1d350e83",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Zipcode with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85a6cb8d-0665-4f8a-8c34-1340d4e61411",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5eca7e6-be83-4105-8819-ae85b1ac87ac",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"      \",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Zipcode  - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "53de4062-44ba-4b6c-bad1-68b631543a36",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8293a2a7-0a97-485e-ba47-da7896ae90da",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when zipcode  entered with more than 10 character\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when zipcode entered with more than 10 character\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code exceeds limit of 10 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"1234567-12345\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Street Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Street 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93eb4a13-358d-4492-8257-88ba18c30f8e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58ff3339-f88b-4ef5-8c79-4ef9aa3aa81d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Street is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Street 1 with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a80641f3-e692-4831-812d-c2a2119ed56c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "901bedc4-86be-46b9-901c-9701c720588b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Street is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"                   \",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Name Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "52789850-df43-4029-9de2-0e27c11832a4",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9fe17418-0e66-4978-a937-0100299fd65c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Name with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d2c2e8e-993f-4d22-abf5-597efa0dddf9",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d7336f29-a4df-411b-ba78-93857c76b96f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"                  \",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cryptogram Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Cryptogram Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b972a75-e69d-49b0-b058-fed17f4c2244",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5e543fa-473c-4c3f-a074-6cb2c7e26a38",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when already used Cryptogram passed to this request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify errorMessages is appeared when already used Cryptogram passed to this request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Cryptogram Invalid Transaction Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f6d128b-b074-4009-8b42-52a1cefdb9d6",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "394c9626-b68e-43ba-ad57-f735ab48332e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when Debit Transaction type passed to Credit request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when Debit Transaction type passed to Credit request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Cryptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "860ec29e-483d-4a48-9d14-e88e7a3df96b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1600fade-a8b4-461b-91dd-52c261c10977",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when cryptogram passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when cryptogram passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Routing Number is required.\");\r",
											"    pm.expect(responseData.validationFailures[1].message).contains(\"Account Number is required.\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Incorrect Cyptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "800e9209-06c1-4c9d-8a2e-e50aff4a26b4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eacd193a-8a98-48f0-868b-2397061ba46e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response should not appear when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"1234567890ASHHHHHHHHKL\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Incorrect TranscenterID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85296279-7725-4464-8d38-7dc19dfef4b5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8273e924-a4e7-4136-a9f9-3b7d89fd039c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when without fee transcenterid passed to with fee request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when without fee transcenterid passed to with fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Incorrect ProcessorId(W/O Fee)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67183bd5-d7d3-49d3-8d23-000c2a28a7f2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e709103-6859-49a3-abf3-4ccb5316e850",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when without fee processor id passed to with fee request \", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when without fee processor id passed to with fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_Credit_WITHFEE Incorrect ProcessorId Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d995f1a6-8708-4ff9-bf2f-995c8f336063",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf9ed645-e577-405c-842f-1928bfe04048",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when credit processor id passed  to ACH request\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when credit processor id passed  to ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Amount Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Amount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e7fd0b6-c375-4ca7-a7be-457c8174709b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f906f60d-99b6-48a8-a1d3-aa46529169c9",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Amount with emptyspace",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09967aac-c611-4735-8a2a-510386323fad",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bfc3b8cc-f185-43dc-acb7-613f01186213",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"              \",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Amount contains String",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86d94e12-f8cc-467c-af75-ccfbb92403c2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "acd0927b-96fb-4dff-bf0f-1f4174b4da22",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify  success response should not appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value. Must be all numbers and two decimal digits max.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"100.00TEST\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Amount in Minus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c6b11a06-56f4-42db-ad0d-bf796aaa1bbb",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5fd7988e-40ef-4ed4-9e2b-0a1e01b19e70",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"-10.00\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Amount in Numeric",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f1e28625-4bda-4960-ad03-8e837f37b302",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c34969a6-598d-47d5-a993-6b0b89215c8b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify OrderID is not null or empty\", function () {\r",
											"    pm.expect(responseData.data.orderId).not.to.be.null;\r",
											"    pm.expect(responseData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify Credit amount is appeared correctly.\", function () {\r",
											"    pm.expect(parseFloat(responseData.data.creditAmount)).equal(parseFloat(jsonReq.transactionAmount));\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify authResponse Status\", function () {\r",
											"    pm.expect(responseData.data.authResponse).eql(\"Pending\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify reference number not to be empty\", function () {\r",
											"    pm.expect(responseData.data.referenceNumber).not.to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.match(/^[0-9]*$/);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"    pm.expect(responseData.errorMessages).to.be.empty;\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.validationFailures).to.be.empty;\r",
											"    pm.expect(responseData.isSuccess).eql(true);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this action is appeared correctly for ACH\", function () {\r",
											"    pm.expect(responseData.action).eql(\"AchCredit\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"false\",\r\n\t\"orderIdIsUnique\": \"true\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": 500,\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Account Type Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Account Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a6b732d-3dca-413b-82f8-4a6f8d11b7f8",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7663e7c7-0580-43c9-9d4b-7e30f565431f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when account type is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Account Type is required\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Account Type Other than Credit/Saving",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a40acc2c-8fb1-4ea3-8537-3e49adeaad6e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e3385a2b-227b-4403-bd69-90a57b0fb145",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when Account type passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures.message).contains(\"Invalid Account type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"Credit\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Category Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Category Text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10562fd3-36bf-4f76-a6c1-068f10e7d622",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d57ea698-3f77-45d2-9a18-19a768489f0e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when Category text passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when category text is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Empty Category Text  with emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96ff3ede-0798-40f8-8870-03b289e4b220",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f33c07be-2f73-4b62-a23e-dbdf8d785aa2",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when Category text passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when category text is passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"          \",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Invalid category validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "757ecc2c-4d86-409d-98a9-ddabdbc9b0ea",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be84cd90-dff1-472d-85e4-77fb28c60be6",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when invalid category text passed\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when invalid category text is passed\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"has not been created yet. You must create the category prior to processing a transaction with it.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\"Testing\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Category Text - MAX char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a33faaae-d3f2-4df6-a9ed-bfb96ebf383a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2864333c-32db-4776-8e3d-bd106aabf24f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when category reached its maximum character limitation\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared  when category reached its maximum character limitation\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Ach Category exceeds limit of 23 characters\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"S\",\r\n    \"categoryText\":\" TestingTestingTesting Testing\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Merchant Key Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE  Empty Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b83d0e9-772b-4bd5-9e18-d6902846e3c5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bebb7ea7-7db5-4025-8b92-46b8c9bd0ba7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Invalid Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a44955f-bdd1-44d9-8a78-0e1a530b532e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25861e1c-f3a7-49d8-a6cf-54cfc590161d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"12312454564564654\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE W/O Fee merchant key to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb1d431e-49eb-4c5e-bc31-56f3e294be06",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "48978463-4b3e-48bd-81c3-256c25bf69ef",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Without fee merchant key passed to with key\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Processor ID Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "291f9f26-c975-4854-aa00-bd724b54d0a7",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d16b307-fb5c-4166-91a1-51d0fc060a2e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Invalid  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "810c6603-f1a1-4dd7-96b1-f6e0145af0e3",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e75e3567-f996-48cd-88a2-b1c1f28bea56",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"123123\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE W/O Fee Processor ID to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4fd22f0-2ed4-46b9-a8e1-50e144c6633c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f162a106-9ffb-4ae3-8d82-eb99fd5a0b7c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when wihout fee processor id passed for Fee API\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Credit Fee Processor passed to ACH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b95336fc-e2ff-4b77-bbf9-637c9cd89e05",
										"exec": [
											"pm.sendRequest({\r",
											"    url:\"https://secure-qa.goemerchant.com/secure/PaymentHostedForm/v3/GenerateAchCryptogram\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c7dc6c6-7b9d-40b4-9c45-bb46b99dcda5",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when credit processor id passed to ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Invalid Account Type For Transaction\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"187814\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OrderId Validation",
					"item": [
						{
							"name": "ACH_CREDIT_WITHFEE Empty Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ee6ff0a-8605-4092-be6b-5400be611fef",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e5dbb4d-1ff3-4dc7-ba07-9dd7d6cdbb2a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify success response should not appear when orderid passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when order id passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Order Id is required.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Auto Generate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fcb65578-04fc-47c1-80e0-6d07835ffef7",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "657eaa59-3c14-485c-a77b-36ec9007e19b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).lengthOf(18);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"true\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Auto id generation though manually order id set.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e4779ee-90b0-45a0-8f2c-d5b2a21b1ee7",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d00c033f-18ee-46bf-b4de-91dccdb20809",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).lengthOf(18);\r",
											"    pm.expect(responseData.data.orderId).to.match(/^[0-9]*$/);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"true\",\r\n    \"orderIdIsUnique\":\"false\",\r\n\t\"orderId\": \"KN_ACH{{$randomInt}}_{{$timestamp}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Duplicate order id allow when it set as TRUE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4803be66-1bbf-4b5c-9062-965a4a3ecea2",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62e26571-1ae6-444c-8499-9c447bf79ea9",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when already exists order id is passed when the flag set as true\", function () {\r",
											"    pm.expect(responseData.data.orderId).to.be.empty;\r",
											"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
											"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify Validation message is appeared when already exists order id is passed when the flag set as true\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Order Id is not unique\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\",   \r\n    \"autoGenerateOrderId\":\"false\",\r\n    \"orderIdIsUnique\":\"true\",\r\n    \"orderId\":\"{{orderid}}\",\r\n    //    \"aba\":\"111000025\",\r\n    //    \"dda\":\"000000099\",\r\n    \"accountType\":\"C\",\r\n    \"categoryText\":\"Web\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{OwnerName}}\",\r\n    \"ownerStreet\":\"{{OwnerStreet}}\",\r\n    \"ownerStreet2\":\"{{OwnerStreet2}}\",\r\n    \"ownerCity\":\"{{OwnerCity}}\",\r\n    \"ownerState\":\"{{OwnerState}}\",\r\n    \"ownerZip\":\"{{OwnerZip}}\",\r\n    \"ownerCountry\":\"{{OwnerCountry}}\"\r\n    //TCID-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_CREDIT_WITHFEE Duplicate order id allow when it set as FALSE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73e8f515-8204-4e10-9613-9e3d856935f9",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d7cb234-de45-4f32-940b-16fb8fabaed0",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\":Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Order id generated automatically\", function () {\r",
											"    pm.expect(responseData.data.orderId).eql(jsonReq.orderId)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"autoGenerateOrderId\": \"true\",\r\n\t\"orderIdIsUnique\": \"false\",\r\n\t\"orderId\": \"{{orderid}}\",\r\n\t\"accountType\": \"C\",\r\n\t\"categoryText\": \"Web\",\r\n\t\"transactionAmount\": \"{{Amount}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"{{OwnerName}}\",\r\n\t\"ownerStreet\": \"{{OwnerStreet}}\",\r\n\t\"ownerStreet2\": \"{{OwnerStreet2}}\",\r\n\t\"ownerCity\": \"{{OwnerCity}}\",\r\n\t\"ownerState\": \"{{OwnerState}}\",\r\n\t\"ownerZip\": \"{{OwnerZip}}\",\r\n\t\"ownerCountry\": \"{{OwnerCountry}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/AchCredit",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"AchCredit"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cb59db69-23af-47dd-87ed-11216ed6eb30",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "25ea7850-b638-4be0-abde-47decd6a2fd5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive ACH VAULT WITH FEE",
			"item": [
				{
					"name": "ACH_VAULT_WithFee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e352a371-0b95-4b0b-a602-8d2646446166",
								"exec": [
									"pm.environment.set(\"cryptogram\", \"\");\r",
									"pm.sendRequest({\r",
									"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body:{\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
									"            }\r",
									"}, function (err, res) {\r",
									"    console.log(res.json())\r",
									"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cbdca6a-8b90-417b-9957-29f6ddf07790",
								"exec": [
									"var responseData = pm.response.json();\r",
									"var requestData = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(request.name+\": Verify the response code valid request is passed\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.globals.set(\"vaultkey\",requestData.vaultKey)\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify id is generated.\", function () {\r",
									"    pm.expect(responseData.data.id).not.to.be.null;\r",
									"    pm.expect(responseData.data.id).to.match(/^[0-9]*$/);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify response contains any error\", function () {\r",
									"    pm.expect(responseData.isError).eql(false);\r",
									"    pm.expect(responseData.errorMessages).to.be.empty;\r",
									"    pm.expect(responseData.validationHasFailed).eql(false);\r",
									"    pm.expect(responseData.validationFailures).to.be.empty;\r",
									"    pm.expect(responseData.isSuccess).eql(true);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify action is appeared correctly for ACH\", function () {\r",
									"    pm.expect(responseData.action).eql(\"VaultCreateAchRecord\");\r",
									"});\r",
									"\r",
									"/****************Schema Validation *****************/\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"\r",
									"        \r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"examples\": [\r",
									"        {\r",
									"            \"data\": {\r",
									"                \"id\": 27182\r",
									"            },\r",
									"            \"isError\": false,\r",
									"            \"errorMessages\": [],\r",
									"            \"validationHasFailed\": false,\r",
									"            \"validationFailures\": [],\r",
									"            \"isSuccess\": true,\r",
									"            \"action\": \"VaultCreateAchRecord\"\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"isError\",\r",
									"        \"errorMessages\",\r",
									"        \"validationHasFailed\",\r",
									"        \"validationFailures\",\r",
									"        \"isSuccess\",\r",
									"        \"action\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"id\": 27182\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"id\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"$id\": \"#/properties/data/properties/id\",\r",
									"                    \"type\": \"integer\",\r",
									"                    \"title\": \"The id schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": 0,\r",
									"                    \"examples\": [\r",
									"                        27182\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        },\r",
									"        \"isError\": {\r",
									"            \"$id\": \"#/properties/isError\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isError schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"errorMessages\": {\r",
									"            \"$id\": \"#/properties/errorMessages\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The errorMessages schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/errorMessages/items\"\r",
									"            }\r",
									"        },\r",
									"        \"validationHasFailed\": {\r",
									"            \"$id\": \"#/properties/validationHasFailed\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The validationHasFailed schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"validationFailures\": {\r",
									"            \"$id\": \"#/properties/validationFailures\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The validationFailures schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/validationFailures/items\"\r",
									"            }\r",
									"        },\r",
									"        \"isSuccess\": {\r",
									"            \"$id\": \"#/properties/isSuccess\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isSuccess schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                true\r",
									"            ]\r",
									"        },\r",
									"        \"action\": {\r",
									"            \"$id\": \"#/properties/action\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The action schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"VaultCreateAchRecord\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"\r",
									"\r",
									"        };\r",
									" \r",
									"pm.test(request.name+\": Verify the actual response schema matched with expected schema\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"KN - FAPS QA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
							"host": [
								"{{EndPoint}}"
							],
							"path": [
								"secure",
								"RestGW",
								"Gateway",
								"Transaction",
								"VaultCreateAchRecord"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative ACH VAULT WITH FEE",
			"item": [
				{
					"name": "Name Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHFEE Empty Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d01d3ac7-b4f6-4d1f-97c8-ecfe64b79732",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f27cd293-514e-4638-bb3b-69c1db649dce",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.id).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Empty Name with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e1e74375-dc46-40d5-8d18-223ca981b423",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "836bee24-f3e9-4d1b-83c6-2e2b773f0bc7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.id).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cryptogram Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHFEE Cryptogram Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5be1ca90-bb6b-4355-a395-56513fd1b31a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5444d8f8-f3e5-4ae7-8fa5-2a00130f1538",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when already used Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is when already used Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Cryptogram Invalid Transaction Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30c449e9-03e9-438f-b2f7-5aeea57f7e08",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62ab53b2-2d05-487b-992b-553905a5857b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when invalid transaction type passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when invalid transaction type passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Empty Cryptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c061d21-4e68-40fa-8d7d-a9a9cd1b95c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c162b962-ec18-454e-9ff7-60af94cbf85b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when cryptogram passed with empty value\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"  });\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when cryptogram passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Account Number is required.\");\r",
											"    pm.expect(responseData.validationFailures[1].message).contains(\"Account Type is required.\");\r",
											"    pm.expect(responseData.validationFailures[2].message).contains(\"Routing Number is required.\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Incorrect Cyptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c0ed2a9-955a-43f5-b6df-467941f009be",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7b73af10-cf58-49f5-b39b-2757714a19fd",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when invalid Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when invalid Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"123456789AAAA\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Incorrect TranscenterID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aeb87ae9-397a-40a4-9e76-d4809d3534e3",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":\"70391\",\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5606a937-1c8c-4c3b-bc53-f6f896a286e7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when invalid transcenter id passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when invalid transcenter id passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Incorrect ProcessorId(W/O Fee)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f308d6a-05e3-457c-905d-6129fd40a2ad",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":\"187928\",\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4cd67e7-0596-4b3e-ae58-55b53d43440d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when W/O fee passes to the WithFee request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when W/O fee passes to the WithFee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Incorrect ProcessorId Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9c42b13-3e03-4f98-86df-c025f1185d91",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":\"187814\",\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e1f0731d-8707-411e-a5eb-60ba2a410fef",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when credit processor id passed to the ACH\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when credit processor id passed to the ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Merchant Key Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHFEE  Empty Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4e1a52f-1613-4f96-aeb7-7930f07dd081",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e907dcce-b2f8-42e9-9a12-e26081b85669",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the response code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE W/O Fee merchant key to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c90543d6-000f-45fb-a925-dfd46c2abeda",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "615eea49-f1d3-447e-800a-d78c639fb172",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the response code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when without fee merchant passed to the with fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Invalid Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ce6cfe0-2c07-417c-9b97-a88308c21450",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd9b060c-3599-4447-a88d-40734db8e3c0",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the response code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"89789798798798 789789\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Processor ID Validation Copy",
					"item": [
						{
							"name": "ACH_VAULT_WITHFEE Empty  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1faf8882-4fba-4eb4-93c1-b3bf4ab4c38b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2bbe095c-4143-4b33-9ee7-b039fdef2f8f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the responses code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Invalid  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0f0f0c7-cbcc-44f9-b559-5bcb4067665b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "341ade62-7a6d-4ddb-bd47-86ffa2265a65",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the responses code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor id passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"454565454\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE W/O Fee Processor ID to With Fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "621986f5-b8d1-4bf8-a0ce-3c0cd22a14d1",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3dfdf43f-58c2-4968-8f47-2117fedd4015",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the responses code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when without fee processor id passed for Fee API\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHFEE Credit Fee Processor passed to ACH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ebcc35d-e68f-42d9-95c6-df092c4b1f67",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f714aef0-06f1-448b-a530-3f73bfb8197d",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify the responses code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when credit processor id passed to ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Not Authorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "VaultKey Validation",
					"item": [
						{
							"name": "ACH_VAULT_WithFee Empty Vaultkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba377cff-0b3d-4e9a-8b0c-7e88c5ca8095",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "294c4a28-4ac3-4705-ba04-946d1ad75683",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id will not generate when Vault key passed with empty value. \", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee Empty Vaultkey emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd82d958-6ac9-4469-8308-881d1b20069e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6df919f4-cb11-4d2f-8aee-e681961aed72",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"                      \",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee Min Char Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5830e984-23fc-4e2a-bced-e3ef305ec07a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e56e3d73-3a81-493c-908b-490dd0ff5d31",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with less than minimum char has set.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with less than minimum char has set.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee Max char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "797d409d-e90d-40e9-a7ca-7c7c8928cd52",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7caf9e2-1ee7-474e-a57d-ac2b414b63eb",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with more than maximum char has set.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with more than maximum char has set\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}1234567891011121314151617181920212222324252627282930313233343536373839404142\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee - Only Letter Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3acdf8bd-30fd-430a-bd27-e1eefddc7b8e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62866180-752a-4892-a2b6-7398928e2367",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key contains only characters.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key contains only characters.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"TESTING{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee - Only Number Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b17836a-d3f4-4b91-a554-7f26565ad0ad",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15497832-a416-4069-be1d-0ecc5c6b7807",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key contains only numbers.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when Vault key contains only numbers.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"1234567{{$randomInt}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee - Valut key without mentioned special char",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3628fabe-ffa7-473e-bf70-12dfc85d641a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3fd94825-cebb-409e-8719-3440287093cc",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Verify vaultKey contains only mentioned special chracters (#$%^*!)\", function () {\r",
											"    console.log(jsonReq.vaultKey)\r",
											"    pm.expect(jsonReq.vaultKey).to.match(/^[A-Za-z0-9(#$%^*!)]*$/);\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key doesnt contains mentioned special characters\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when  Vault key doesnt contains mentioned special characters\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"vaultKey\": \"TEST{{$randomInt}}/\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"KN - FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WithFee - Duplicate vault validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "503e0579-91b2-4fd6-90b1-e68ea029164b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc61bd37-b812-4fa0-833c-45077f2777c6",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when the duplicate vault key passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when the duplicate vault key passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Bank account already exists\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"vaultKey\": \"{{vaultkey}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"KN - FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0f4abbb7-bcd4-4a68-bd34-4a35e369e798",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e8f29d22-6047-4e27-b23c-6ddf37dfbe96",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive ACH VAULT WITHOUT FEE",
			"item": [
				{
					"name": "ACH_VAULT_WITHOUT FEE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80356f6c-3f85-469d-82a4-3246e96e41f4",
								"exec": [
									"pm.environment.set(\"cryptogram\", \"\");\r",
									"pm.sendRequest({\r",
									"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body:{\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
									"            }\r",
									"}, function (err, res) {\r",
									"    console.log(res.json())\r",
									"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5bd140f-e382-4f8a-af6b-648437fe787c",
								"exec": [
									"var responseData = pm.response.json();\r",
									"var requestData = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(request.name+\": Verify response code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.globals.set(\"vaultkeywithoutfee\",requestData.vaultKey)\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify id is generated\", function () {\r",
									"    pm.expect(responseData.data.id).not.to.be.null;\r",
									"    pm.expect(responseData.data.id).to.match(/^[0-9]*$/);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify response contains any error\", function () {\r",
									"    pm.expect(responseData.isError).eql(false);\r",
									"    pm.expect(responseData.errorMessages).to.be.empty;\r",
									"    pm.expect(responseData.validationHasFailed).eql(false);\r",
									"    pm.expect(responseData.validationFailures).to.be.empty;\r",
									"    pm.expect(responseData.isSuccess).eql(true);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify action of this request is appeared correctly for ACH\", function () {\r",
									"    pm.expect(responseData.action).eql(\"VaultCreateAchRecord\");\r",
									"});\r",
									"\r",
									"/****************Schema Validation *****************/\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"\r",
									"        \r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"examples\": [\r",
									"        {\r",
									"            \"data\": {\r",
									"                \"id\": 27180\r",
									"            },\r",
									"            \"isError\": false,\r",
									"            \"errorMessages\": [],\r",
									"            \"validationHasFailed\": false,\r",
									"            \"validationFailures\": [],\r",
									"            \"isSuccess\": true,\r",
									"            \"action\": \"VaultCreateAchRecord\"\r",
									"        }\r",
									"    ],\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"isError\",\r",
									"        \"errorMessages\",\r",
									"        \"validationHasFailed\",\r",
									"        \"validationFailures\",\r",
									"        \"isSuccess\",\r",
									"        \"action\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"examples\": [\r",
									"                {\r",
									"                    \"id\": 27180\r",
									"                }\r",
									"            ],\r",
									"            \"required\": [\r",
									"                \"id\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"$id\": \"#/properties/data/properties/id\",\r",
									"                    \"type\": \"integer\",\r",
									"                    \"title\": \"The id schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": 0,\r",
									"                    \"examples\": [\r",
									"                        27180\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": true\r",
									"        },\r",
									"        \"isError\": {\r",
									"            \"$id\": \"#/properties/isError\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isError schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"errorMessages\": {\r",
									"            \"$id\": \"#/properties/errorMessages\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The errorMessages schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/errorMessages/items\"\r",
									"            }\r",
									"        },\r",
									"        \"validationHasFailed\": {\r",
									"            \"$id\": \"#/properties/validationHasFailed\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The validationHasFailed schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                false\r",
									"            ]\r",
									"        },\r",
									"        \"validationFailures\": {\r",
									"            \"$id\": \"#/properties/validationFailures\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The validationFailures schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"examples\": [\r",
									"                []\r",
									"            ],\r",
									"            \"additionalItems\": true,\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/validationFailures/items\"\r",
									"            }\r",
									"        },\r",
									"        \"isSuccess\": {\r",
									"            \"$id\": \"#/properties/isSuccess\",\r",
									"            \"type\": \"boolean\",\r",
									"            \"title\": \"The isSuccess schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": false,\r",
									"            \"examples\": [\r",
									"                true\r",
									"            ]\r",
									"        },\r",
									"        \"action\": {\r",
									"            \"$id\": \"#/properties/action\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The action schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\",\r",
									"            \"examples\": [\r",
									"                \"VaultCreateAchRecord\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"\r",
									"\r",
									"        };\r",
									" \r",
									"pm.test(request.name+\": Verify the actual response schema matched with expected schema\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"KN - FAPS QA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
							"host": [
								"{{EndPoint}}"
							],
							"path": [
								"secure",
								"RestGW",
								"Gateway",
								"Transaction",
								"VaultCreateAchRecord"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "45889f18-876f-47a4-b759-7b0f13dafe1a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd85a53f-fdb4-47b4-b37b-a69815bbcf04",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative ACH VAULT WITHOUT FEE",
			"item": [
				{
					"name": "Name Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHOUTFEE Empty Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51b7d7f8-c5b9-422e-91da-77d606668eaa",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c880e42-a4a6-44b5-abf0-b62f04a55f6a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.id).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Empty Name with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e3e0039-aadd-41ff-a456-f08167958f5f",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5304650f-831e-4066-9cf4-5c5a47d6ca12",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.id).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"                 \"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cryptogram Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHOUTFEE Cryptogram Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "24ac0f3f-71bf-41dc-af6c-e783d6adf9ae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0c5948b-fd83-41ef-8642-b1fa048ffb6c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when already used Cryptogram passed in the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when already used Cryptogram passed in the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Cryptogram Invalid Transaction Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2b71211b-7221-4664-8afa-1894509ba0b5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"AchCredit\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dedc4453-f38f-49dc-85f7-c38ee219deee",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when invalid transaction type is passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when invalid transaction type is passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Empty Cryptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "80e9be9a-d187-44a7-a066-0536f63dd4f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45f36cb9-b8dd-4664-8f0b-a305ce7344e7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when empty cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when empty cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Account Number is required.\");\r",
											"    pm.expect(responseData.validationFailures[1].message).contains(\"Account Type is required.\");\r",
											"    pm.expect(responseData.validationFailures[2].message).contains(\"Routing Number is required.\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Incorrect Cyptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "194eae2a-e227-449a-81f9-d18f11afb4f2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8da8fa86-a55f-4812-aae4-b7bd4b50735e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"123456789AAAA\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Incorrect TranscenterID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ad53e143-2285-411d-8c5a-fb86b88cee05",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f6fdab74-28c1-4dde-a91b-fc72f33ad39f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when 'with fee' trancenter id passed to W/o fee request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when 'with fee' trancenter id passed to W/o fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Incorrect ProcessorId(With Fee)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "edcf72b2-b87d-4310-845c-1fd00408bbe8",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45290d9d-7952-48b4-9652-097656adce2a",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when 'with fee' processor id passed to W/o fee request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when 'with fee' processor id passed to W/o fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Incorrect ProcessorId Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93b305c6-eef7-4dc2-9dbc-128d7cfc380d",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c99939da-7d92-479b-83de-5e8d1eb5d012",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when credit processor id passed to ACH\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when credit processor id passed to ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Merchant Key Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHOUTFEE  Empty Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "89f04ca5-c27b-4da1-986e-2b1497e660e4",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6e1eba2d-334f-4fe6-a955-2df8417adc0c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when Merchant Key passed with empty value \", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Invalid Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73acbb56-735d-4a17-a6e0-0f6cd1f390ba",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f49ebd2b-ea43-40f1-b7e3-a477db225b07",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when Merchant Key passed with invalid value\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"123456456\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE  - Incorrect merchant Key [With Fee]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "04b098b1-1f6e-44a6-b98c-ad4bd805ab1c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dd07138-2715-4f9c-9615-ff4d6c87ab1e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when 'With Fee' merchant key passed to the W/O Fee request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when 'With Fee' merchant key passed to the W/O Fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Processor ID Validation Copy",
					"item": [
						{
							"name": "ACH_VAULT_WITHOUTFEE Empty  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0c203ac-4f59-400f-9203-3a1d90607c98",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc105eb0-3a5f-4ac6-9706-f5cb81f84fd1",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is  403 when processor ID passed with empty value\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor ID passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Invalid  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e7ff6fe-eabc-4982-b15a-6d0de1323def",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22757758-670e-4b5b-a563-c142e253f4a7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is  403 when invalid processor id passed to the request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when invalid processor id passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"454565454\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Incorrect Processor ID [With Fee]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "27d64611-86df-4f6d-8fb2-f29c633a7b1e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a88c54d7-7b70-4215-8909-1b80a757cd71",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when 'with fee' processor id passed to the W/O fee request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403 when 'with fee' processor id passed to the W/O fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{ACHProcessorIDWithFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Incorrect Processor ID[Credit]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b0d5ba5-bca6-4be1-9ecb-2c42a2e5ad69",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "062d812e-ecb0-46c2-8bf5-a6ea473e6783",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 400 when credit processor id passed to ACH request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when credit processor id passed to ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Not Authorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\", \r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "VaultKey Validation",
					"item": [
						{
							"name": "ACH_VAULT_WITHOUTFEE Empty Vaultkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a352a806-1ae8-472a-903f-4279be56ec96",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e68465cb-abfc-4097-9dc6-8585b5aeb4f3",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Empty Vaultkey emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2386629-45ca-4799-8832-82a33f11db1c",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e63beee-7dc5-4bc9-88ea-211238b8ce31",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"                      \",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Min Char Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44b25f03-00fb-4b1d-befc-c9e5c712bd3a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50eda680-e808-49e5-90cb-b6cd7deb2d9f",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with less than minimum char has set. \", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared whwhen Vault key passed with less than minimum char has set.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE Max char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "caec2302-a7d9-4d0b-a6f0-a72065d9c694",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7c57d164-17b8-4b1d-a64f-57a81e935ec8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with more than maximum char has set. \", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with more than maximum char has set.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}1234567891011121314151667876867876876876862728293031323334353637383940414\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE - Only Letter Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0fefe4e0-aef5-4d6e-a81d-26b1da73b867",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "72abf701-5a9b-47b9-8319-3322ef9b1d31",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key contains only characters.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key contains only characters.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomFirstName}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE- Only Number Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69df19ed-f9d0-4922-a26c-487e6bd5f85b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0782dac4-93ca-4b45-956b-d70c46914ec1",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key contains only numbers.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when Vault key contains only numbers.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomInt}}\",\r\n    \"achCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"KN - FAPS QA\"\r\n    //Tcid-70366\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE - Valut key without  mentioned special char",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "15259ae2-383a-4be5-85c2-12295947dedc",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8c1df53-6341-45f2-8079-62b559168d4c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Verify vaultKey contains only mentioned special chracters (#$%^*!)\", function () {\r",
											"    console.log(jsonReq.vaultKey)\r",
											"    pm.expect(jsonReq.vaultKey).to.match(/^[A-Za-z0-9(#$%^*!)]*$/);\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key doesnt contains mentioned special characters\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when  Vault key doesnt contains mentioned special characters\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n\t\"vaultKey\": \"Test+{{$randomInt}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"KN - FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "ACH_VAULT_WITHOUTFEE - Duplicate vault validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "58f595e6-3d81-4500-b323-22a07ca83ca5",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"AchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"Aba\":pm.globals.get(\"ACHAba\"),\"Dda\":pm.globals.get(\"ACHDda\"),\"AccountType\":\"S\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "07d5ba6f-f5fc-4389-a165-d4b61212535b",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when the duplicate vault key passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when the duplicate vault key passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Bank account already exists\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyW/OFee}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDW/OFee}}\",\r\n\t\"vaultKey\": \"{{vaultkeywithoutfee}}\",\r\n\t\"achCryptogram\": \"{{cryptogram}}\",\r\n\t\"ownerName\": \"KN - FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Canadian ACH Vault",
			"item": [
				{
					"name": "CanadianACH_VAULT_WithoutFee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f845de5c-caf3-49c7-aede-cefee81454d0",
								"exec": [
									"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
									"pm.sendRequest({\r",
									"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body:{\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
									"\r",
									"            \r",
									"            }\r",
									"}, function (err, res) {\r",
									"    console.log(res.json())\r",
									"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05ac447f-afdd-4ddf-96d2-fbca702519a3",
								"exec": [
									"var responseData = pm.response.json();\r",
									"var requestData = JSON.parse(pm.request.body);\r",
									"\r",
									"pm.test(request.name+\": Verify response code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"    pm.globals.set(\"canadianachvaultkey\",requestData.vaultKey)\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify id is generated\", function () {\r",
									"    pm.expect(responseData.data.id).not.to.be.null;\r",
									"    pm.expect(responseData.data.id).to.match(/^[0-9]*$/);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify response contains any error\", function () {\r",
									"    pm.expect(responseData.isError).eql(false);\r",
									"    pm.expect(responseData.errorMessages).to.be.empty;\r",
									"    pm.expect(responseData.validationHasFailed).eql(false);\r",
									"    pm.expect(responseData.validationFailures).to.be.empty;\r",
									"    pm.expect(responseData.isSuccess).eql(true);\r",
									"});\r",
									"\r",
									"pm.test(request.name+\": Verify action of this request is appeared correctly for ACH\", function () {\r",
									"    pm.expect(responseData.action).eql(\"VaultCreateAchRecord\");\r",
									"});\r",
									"\r",
									"/****************Schema Validation *****************/\r",
									"var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({logger: console}),\r",
									"    schema = {\r",
									"        \r",
									"\t\"definitions\": {},\r",
									"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
									"\t\"$id\": \"https://example.com/object1606831745.json\", \r",
									"\t\"title\": \"Root\", \r",
									"\t\"type\": \"object\",\r",
									"\t\"required\": [\r",
									"\t\t\"data\",\r",
									"\t\t\"isError\",\r",
									"\t\t\"errorMessages\",\r",
									"\t\t\"validationHasFailed\",\r",
									"\t\t\"validationFailures\",\r",
									"\t\t\"isSuccess\",\r",
									"\t\t\"action\"\r",
									"\t],\r",
									"\t\"properties\": {\r",
									"\t\t\"data\": {\r",
									"\t\t\t\"$id\": \"#root/data\", \r",
									"\t\t\t\"title\": \"Data\", \r",
									"\t\t\t\"type\": \"object\",\r",
									"\t\t\t\"required\": [\r",
									"\t\t\t\t\"id\"\r",
									"\t\t\t],\r",
									"\t\t\t\"properties\": {\r",
									"\t\t\t\t\"id\": {\r",
									"\t\t\t\t\t\"$id\": \"#root/data/id\", \r",
									"\t\t\t\t\t\"title\": \"Id\", \r",
									"\t\t\t\t\t\"type\": \"integer\",\r",
									"\t\t\t\t\t\"examples\": [\r",
									"\t\t\t\t\t\t27170\r",
									"\t\t\t\t\t],\r",
									"\t\t\t\t\t\"default\": 0\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"\t\t}\r",
									",\r",
									"\t\t\"isError\": {\r",
									"\t\t\t\"$id\": \"#root/isError\", \r",
									"\t\t\t\"title\": \"Iserror\", \r",
									"\t\t\t\"type\": \"boolean\",\r",
									"\t\t\t\"examples\": [\r",
									"\t\t\t\tfalse\r",
									"\t\t\t],\r",
									"\t\t\t\"default\": true\r",
									"\t\t},\r",
									"\t\t\"errorMessages\": {\r",
									"\t\t\t\"$id\": \"#root/errorMessages\", \r",
									"\t\t\t\"title\": \"Errormessages\", \r",
									"\t\t\t\"type\": \"array\",\r",
									"\t\t\t\"default\": []\r",
									"\t\t},\r",
									"\t\t\"validationHasFailed\": {\r",
									"\t\t\t\"$id\": \"#root/validationHasFailed\", \r",
									"\t\t\t\"title\": \"Validationhasfailed\", \r",
									"\t\t\t\"type\": \"boolean\",\r",
									"\t\t\t\"examples\": [\r",
									"\t\t\t\tfalse\r",
									"\t\t\t],\r",
									"\t\t\t\"default\": true\r",
									"\t\t},\r",
									"\t\t\"validationFailures\": {\r",
									"\t\t\t\"$id\": \"#root/validationFailures\", \r",
									"\t\t\t\"title\": \"Validationfailures\", \r",
									"\t\t\t\"type\": \"array\",\r",
									"\t\t\t\"default\": []\r",
									"\t\t},\r",
									"\t\t\"isSuccess\": {\r",
									"\t\t\t\"$id\": \"#root/isSuccess\", \r",
									"\t\t\t\"title\": \"Issuccess\", \r",
									"\t\t\t\"type\": \"boolean\",\r",
									"\t\t\t\"examples\": [\r",
									"\t\t\t\ttrue\r",
									"\t\t\t],\r",
									"\t\t\t\"default\": true\r",
									"\t\t},\r",
									"\t\t\"action\": {\r",
									"\t\t\t\"$id\": \"#root/action\", \r",
									"\t\t\t\"title\": \"Action\", \r",
									"\t\t\t\"type\": \"string\",\r",
									"\t\t\t\"default\": \"\",\r",
									"\t\t\t\"examples\": [\r",
									"\t\t\t\t\"VaultCreateAchRecord\"\r",
									"\t\t\t],\r",
									"\t\t\t\"pattern\": \"^.*$\"\r",
									"\t\t}\r",
									"\t}\r",
									"\r",
									"\r",
									"\r",
									"        };\r",
									" \r",
									"pm.test(request.name+\": Verify the actual response schema matched with expected schema\", function() {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
							"host": [
								"{{EndPoint}}"
							],
							"path": [
								"secure",
								"RestGW",
								"Gateway",
								"Transaction",
								"VaultCreateAchRecord"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "76a5191a-430d-49a0-9754-a70a9858ef81",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "efe84f59-9a5b-4100-ac81-c52177505841",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Canadian ACH Vault",
			"item": [
				{
					"name": "Name Validation",
					"item": [
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd66a6a3-ddd8-4126-8c49-aa354a0726e7",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "343460c5-375a-4fc5-8ae3-e067f9af6a85",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.id).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty Name with empty space alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82b761ad-b6ac-4aee-b092-0dd8b7e383fa",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d7d7abad-20cd-45de-8aed-6b2f4b97e26e",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.data.id).not.to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ownerName passed with empty value\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(false);\r",
											"    pm.expect(responseData.isError).eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"        \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cryptogram Validation",
					"item": [
						{
							"name": "CanadianACH_VAULT_WithoutFee Cryptogram Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "13694ddc-0ff2-4b2d-a6dc-5736424471aa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86478e8b-83df-4314-8139-fd055022d7b7",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when already used Cryptogram passed in the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when already used Cryptogram passed in the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Cryptogram Invalid Transaction Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "835401d6-a72e-434c-be65-dcb070987be0",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"AchDebit\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "28905727-af16-4649-a962-ec96a1f4c884",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when invalid transaction type is passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when invalid transaction type is passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty Cryptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07a8a940-e19e-49fe-864e-bde7b3126347",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2181f6cd-ee15-4283-ad73-b9651a0d00f1",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when empty cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"  \r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared  when empty cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.validationHasFailed).eql(true);\r",
											"    pm.expect(responseData.validationFailures[0].message).contains(\"Account Number is required.\");\r",
											"    pm.expect(responseData.validationFailures[1].message).contains(\"Account Type is required.\");\r",
											"    pm.expect(responseData.validationFailures[2].message).contains(\"Routing Number is required.\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Incorrect Cyptogram",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7c41e07-f6e4-4e76-8f47-afe585b3ecce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1fb4b8fd-873f-49fb-a79e-5f46427946be",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when incorrect Cryptogram passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"123456AASASAS\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Incorrect TranscenterID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "502f5da1-1ca2-4317-84ad-b7ca05701d61",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "02b5b078-7e6d-4128-87d4-2332e1472fa4",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when 'with fee' trancenter id passed to W/o fee request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when 'with fee' trancenter id passed to W/o fee request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee ACH Processor Id passed to Canadian ACH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0aac9a3d-a786-4253-9670-bfcddd18472c",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"ACHProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5ddb4384-7915-486b-bbd5-7c3b46ea5b61",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated  when ACH processor id passed to Canadian ACH request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when ACH processor id passed to Canadian ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Incorrect ProcessorId Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de747a4e-e5b8-4d8f-b8c3-6417fe5729ed",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e03a0a5-e948-48b1-b8d5-507f2cc5b713",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when credit processor id passed to canadian ACH\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error is appeared when credit processor id passed to canadian ACH\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Merchant Key Validation",
					"item": [
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f647e14d-22cc-4a48-b84c-4a13b592aef2",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5f629ac1-3d56-4859-8b64-757704ef8009",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when Merchant Key passed with empty value \", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Invalid Merchant Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "042bf349-b8fc-41d3-b8e9-d460bc573bce",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "661b718a-aac4-4134-a3f1-1130067e210c",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when Merchant Key passed with invalid value\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"123ASDASDASD5456\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee - Incorrect merchant Key [ACH]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a540d262-c7d4-4d5b-9dbd-893bae7357e7",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a35a90e-45db-4ac5-98af-60effcad2584",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when 'ACH' merchant key passed to the Canadian ACH request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when 'ACH' merchant key passed to the Canadian ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{MerchantKeyWithFee}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Processor ID Validation Copy",
					"item": [
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a491b3cf-eaa1-4da9-b3eb-e2158f8cbf4b",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73a01073-2a26-4390-a9c3-1613fcbf14e3",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is  403 when processor ID passed with empty value\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when processor ID passed with invalid value\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Invalid  ProcessorId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "504053cc-4f69-4dbe-b2ff-b2437155238f",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e3a774c2-fb98-430d-b203-c4a6cc6a65dc",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is  403 when invalid processor id passed to the request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when invalid processor id passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"123123121\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Incorrect Processor ID [ACH]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1398e3b5-0a4b-401e-a8fe-2641b68bccc9",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5293053e-3e90-4adf-90ef-b203747fe1da",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403  when ACH processor id passed to the Canadian ACH request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403 when ACH processor id passed to the Canadian ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{ACHProcessorIDWithFee}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Incorrect Processor ID[Credit]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa11a20b-8f37-4a9a-82de-d1bdabe73ce9",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e26f6aa-88a7-441c-b9ba-a05b88bd2591",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify response code is 403 when credit processor id passed to Canadian ACH request\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when credit processor id passed to Canadian ACH request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CCProcessorIDW/OFee}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "VaultKey Validation",
					"item": [
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty Vaultkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "95bfc5cb-3945-4952-8817-9fe766c99f06",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd13f251-0676-43ed-9248-33b250924eb3",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Empty Vaultkey emptyspace alone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5fd7c49d-f7eb-4d37-ad96-4fa51ecaad03",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15035896-b34c-49cd-8031-19b012d921e2",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with empty value.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"                \",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Min Char Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "462da9bf-4b2d-48cf-82c5-50a8eaded6a5",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "39d2a443-0fee-41f7-8629-58eb43c296b4",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with less than minimum char has set. \", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared whwhen Vault key passed with less than minimum char has set.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee Max char validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e5a8184-2f3b-4a20-b73d-5aed2ecb7e7b",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13c13b99-b4ae-4d03-a4e1-d3fd18b159b8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key passed with more than maximum char has set. \", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key passed with more than maximum char has set.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n    \"vaultKey\":\"1234567891011121314151667876867876876876862728293031323334353637383940414{{$randomInt}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee - Only Letter Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fde5406f-8ff1-4114-8840-bc76c5e216fc",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3010181a-5ea5-4af2-87f2-343f534cc2f8",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key contains only characters.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when Vault key contains only characters.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee- Only Number Validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1fd4d552-52c2-4629-b07e-eeeb51ed5c39",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "67fe00e3-666a-460a-b9db-dd260c9bd5ab",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key contains only numbers.\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when Vault key contains only numbers.\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}{{$randomInt}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee - Valut key without  mentioned special char",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2ba1583-2fee-4461-9999-967d63e3fb63",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62805265-fb62-45b0-a774-26853470a7b3",
										"exec": [
											"var responseData = pm.response.json();\r",
											"\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Verify vaultKey contains only mentioned special chracters (#$%^*!)\", function () {\r",
											"    console.log(jsonReq.vaultKey)\r",
											"    pm.expect(jsonReq.vaultKey).to.match(/^[A-Za-z0-9(#$%^*!)]*$/);\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when Vault key doesnt contains mentioned special characters\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared when  Vault key doesnt contains mentioned special characters\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{$randomInt}}++{{$randomFirstName}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "CanadianACH_VAULT_WithoutFee - Duplicate vault validation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4bb94b3-a298-4b4b-93fa-41313803467e",
										"exec": [
											"pm.environment.set(\"CanadianACHcryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CanadianAchCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"CanadianACHTranscenterId\"),\"ProcessorId\":pm.environment.get(\"CanadianACHProcessorId\"),\"TransactionType\":\"Vault\",\"BankNumber\":pm.globals.get(\"CanadianACHBankNumber\"),\"TransitNumber\":pm.globals.get(\"CanadianACHTransitNumber\"),\"dda\":pm.globals.get(\"CanadianACHdda\"),\"AccountType\":\"C\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"ACHAmountEnabled\")})\r",
											"\r",
											"            \r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"CanadianACHcryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ff42217-7ebc-4ea5-9d69-558b6f559a27",
										"exec": [
											"var responseData = pm.response.json();\r",
											"var jsonReq = JSON.parse(pm.request.body);\r",
											"\r",
											"pm.test(request.name+\": Verify id is generated when the duplicate vault key passed to the request\", function () {\r",
											"    pm.expect(responseData.data).to.be.null;\r",
											" });\r",
											"\r",
											"pm.test(request.name+\": Verify error message is appeared  when the duplicate vault key passed to the request\", function () {\r",
											"    pm.expect(responseData.isError).eql(true);\r",
											"    pm.expect(responseData.errorMessages).contains(\"Bank account already exists\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"merchantKey\": \"{{CanadianACHMerchantKey}}\",\r\n\t\"processorId\": \"{{CanadianACHProcessorId}}\",\r\n\t\"vaultKey\": \"{{canadianachvaultkey}}\",\r\n\t\"achCryptogram\": \"{{CanadianACHcryptogram}}\",\r\n\t\"ownerName\": \"FAPS QA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateAchRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateAchRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Vault_With_FEE Copy",
			"item": [
				{
					"name": "postive case",
					"item": [
						{
							"name": "VaultCreateCCRecord for Amex cardnumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a52478a-fc5c-4578-a45e-381964242306",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "345368a1-7a2f-4a55-9c2c-3da5301e9add",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",   \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "VaultCreateCCRecord for  Visa  Cardnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26d5f352-ef1c-4738-9539-eed1aad013c7",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c29874ca-80a9-4778-8aeb-69d75c583f4b",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "VaultCreateCCRecord for Master Cardnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc913aff-59ed-4a57-90c1-0611b970d226",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f6cc37f-ca78-49c7-a1da-48adc9bbbd1c",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "VaultCreateCCRecord  for  Discover Cardnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1361126-21a5-43fa-9566-d021437f2d44",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "35985cad-1b4c-4256-9234-2376e83b99ab",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative case",
					"item": [
						{
							"name": "Country validation",
							"item": [
								{
									"name": "Country as passing as numeric vaule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "00f30298-4e0e-4172-b2fb-690ce5894f0c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e5c6680-ebdc-4db1-8350-a298be430948",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when country passed with numeric value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"Country should not be numeric\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\":\"{{vault}}+53\",   \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"2554554\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ea7bc6c-3e7c-4b3a-8a5b-7245e5c4ee0e",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"         raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3d098800-d09f-4c6a-bf20-a8cf9515307b",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when country passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.orderId).to.be.empty;\r",
													"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
													"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Country is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country passing as  shortcode validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65327725-fbbe-4500-a40f-f634f90ed30d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7a35da2-a29d-47d7-80aa-7276f554c5d0",
												"exec": [
													"var jsonReq = JSON.parse(pm.request.body);\r",
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify country is passed with its shortcode(2 digit)\", function () {\r",
													"   var abbr= jsonReq.ownerCountry;\r",
													"    pm.expect(abbr).lengthOf(2)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when country passed with shortcode \", function () {\r",
													"    pm.expect(responseData.data.orderId).to.be.empty;\r",
													"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
													"    pm.expect(responseData.data.referenceNumber).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when country passed with shortcode  \", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Country not displayed with its short code\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"United States\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Zipcode Validation",
							"item": [
								{
									"name": "Zipcode passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28e1abfd-95be-4192-82e7-1c4e5e7996a1",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "42a50591-cdec-4893-a343-80fd98ddbefb",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Zipcode passing as String Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4eb0f75-0b5c-4fd3-996e-e1ed1f0062c0",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7dba0c3b-42be-42c0-a17f-9ec9f3c53233",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													" \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal code should be numeric\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"NewYork\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Zipcode passing as Max value ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5264e9b-cde0-443e-af0b-8babfe20fbcc",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7ed86ef7-659a-41bf-88b5-bd5b269a5a40",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"    pm.expect(responseData.data.authResponse).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when zipcode entered with more than 10 character\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code exceeds limit of 10 characters\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"1234567-12345\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "State validation",
							"item": [
								{
									"name": "State passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e73b2d5d-5823-4368-b8a4-40845ef9bff6",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85dca68f-0a55-42b2-80a3-ece4a76b01f5",
												"exec": [
													"var responseData = pm.response.json();\r",
													"pm.test(request.name+\": Verify whether success response is appear when state passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"State is required\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "State passing as Numeric value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "131b73db-14e2-4534-a514-889132c9cfa7",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d500d917-161f-4a29-a0cb-90587c18c4a8",
												"exec": [
													"var responseData = pm.response.json();\r",
													"pm.test(request.name+\": Verify whether success response is appear when state passed with numeric value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with numeric  value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"State should not be numeric\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"54444\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "State passing as EmptySpace ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "feb5ea23-b7b8-4b0d-a793-86cdbcc6754a",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5494fc0a-e8cd-4be0-be07-f6bb010964a8",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when state passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"            \",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "State passing as Shortcode validation ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d3708e63-dade-440e-a001-6626f49211d5",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"         raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "651ebc6c-f56d-4e68-bdfd-def73e649fa1",
												"exec": [
													"var jsonReq = JSON.parse(pm.request.body);\r",
													"var responseData = pm.response.json();\r",
													"//var jsonReq = (pm.request.body).toJSON();\r",
													"console.log(jsonReq);\r",
													"\r",
													"pm.test(request.name+\":  Verify state is passed with its shortcode(2 digit)\", function () {\r",
													"   var abbr= jsonReq.ownerState;\r",
													"    pm.expect(abbr).lengthOf(2)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when state passed with shortcode value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with shortcode value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"State not displayed with its short code\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"Texasnewyork\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "City Validation",
							"item": [
								{
									"name": "City passing as Empty value ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4d05f7b3-9bcc-4c32-97bc-497fa485e474",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f5c34bcf-8b41-4e14-8bdf-59aec6f53f4b",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "City passing as Numeric Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "10007ea0-8f3d-4a6b-9ed4-7f8373cb4ee0",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fee04c96-3e4a-4969-99ea-c6475d937b6a",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with numeric value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with numeric value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City should not be numeric\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"455421213\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "City passing as Emptyspace ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5f9de2be-bb17-4286-92d0-9c501f01dedc",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9818a1e4-bffc-45fa-98c7-725285ef387e",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"        \",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "City passing as Max more then 100 Value ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f356a69b-36a0-45e0-b014-6cac0afa5007",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3e67e7af-ad10-4947-9bff-a8e50ad1de6f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with Max  value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with Max value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City exceeds limit of 100 characters\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\" new york Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu North Island, New Zealand\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Street Validation",
							"item": [
								{
									"name": "Street passing as Empty vaule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9695b7e6-051a-4a5c-996f-2e7a35eb2d19",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d955c1c5-df32-41bd-b47a-dd7ecd04c702",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when street 1 passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"Street is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street Passing as Emptyspace value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6d2eb5f6-64e3-4005-b3ef-f5922104f45c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "71bbc3db-6457-4086-a6af-6472be26f11e",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when street 1 passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"Street is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"                 \",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Name Validation",
							"item": [
								{
									"name": "Name Passing as Empty vaule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cd7a1793-0aff-4b8a-a9b0-1f875075209e",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f02525f-019b-416b-a386-7bc519d12e1b",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Name Passing as Emptyspace ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "37827bf7-9fb5-491b-8641-5591d3f94631",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c1a80b6-3662-4542-929a-10510795ba3d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"           \",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Merchant Key validation",
							"item": [
								{
									"name": "Merchant key passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "11d65634-8863-41a1-8979-e15e966dcb70",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ef2deb9f-0131-4957-ab38-10e4de3c69f1",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Merchant key passing as Invalid Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ccb22f8-23f6-4898-9383-c54e8d3979a1",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7a8319d5-6c10-47ac-9379-92db5567f550",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"12312454564564654\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Processor ID validation",
							"item": [
								{
									"name": "Processor ID passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "82014f7b-5c1d-4560-9306-c02ee7d122c0",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9f37c6b1-ac0c-4527-868d-c3e48d7ea85a",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Processor Id passing as Invalid Processor ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "35423e52-99fa-4e1d-8e33-27c9b780af99",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "99e75722-c6ce-4d44-867a-2883204c6ae3",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when processor id passed with invalid value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"123123\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cryptogram Validation",
							"item": [
								{
									"name": "Passing Invalid cryptogram",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fd5375b-fcf4-42c0-847b-e10330b41a01",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(false)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
													"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
													"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
													"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
													"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
													"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"b4a7dc8c-b1a0-4dd9-884b-8d09f070d5cf\",\r\n    \"processorId\":\"187814\",\r\n    \"vaultKey\":\"{{vault}}\",   \r\n    \"creditCardCryptogram\": \"AAAA0000017K158DZ95FIR5U\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://secure-qa.goemerchant.com/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"protocol": "https",
											"host": [
												"secure-qa",
												"goemerchant",
												"com"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cryptogram Passing as Expired   ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1e356a2-fb3f-4777-a266-5fc31222d3c8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "520111d2-c945-49bb-b8af-970a98b56c8d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing  Invaild   Transaction Type ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d912154c-477a-404c-8bd9-347bb3ee072d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"AchDebit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c8c2c464-5762-490a-b4fa-f73566eb92c3",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing cryptogram as Empty Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "96731ea1-7d03-4286-8cb7-dec6ddea2af9",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "58b32544-dcd0-4e54-a23e-f41185484c7a",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(false)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Credit card number is required\");\r",
													"    pm.expect(responseData.validationFailures[1].message).contains(\"Credit Card expiration month is required\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "PAssing Incorrect cryptogram value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0354da7d-2676-4d40-a729-27ba10d5ceee",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"1234567890ASHHHHHHHHKL\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing  a Incorrect Transcenter ID ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b6bad5-317c-4819-9d5f-1f632a1fc62d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":\"70391\",\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9e850bf1-8b2d-49cf-b6e2-4cf2071224db",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "VaultCreateCCRecord  passing Incorrect ProcessorID Without Fee",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2be09b5f-1ab0-4a23-8e71-500ab645860c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f10a1e7-da74-4ec4-81f6-1341e06b4d0f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Unable to retrieve merchant information\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "VaultCreateCCRecord passing as Incorrect ProcessorId ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f93d79a-7cdb-4b9c-a59f-a12362bc4d14",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":\"187902\",\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "959fefe9-fc6e-444f-a519-6f1c38bfa178",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Vault key Validation",
							"item": [
								{
									"name": "Passing  a Empty Vaultkey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b7771e20-59b8-4823-9f15-93faed0f7794",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9de9a72-3c55-4ac1-89ae-07ef662cb12e",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a Emptyspace vaultkey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8cf1e437-40e3-4129-9cdb-d951803c79dd",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3a46da37-5c16-4434-b4e4-f25f46f098a9",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when emptyspace passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"              \",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a Min Char validation for Vault Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "db6aec79-2920-4bb9-85b0-aaff9bcfcffe",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1af1d8d2-b4a3-43eb-9f93-d3fe338f216d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"123\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "passing a max char validation for vaultkey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "836a15ab-34e9-4e18-8574-14d50d866b80",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57a6dd2a-150e-44ec-b829-ca2d25057443",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"1234567891011121314151617181920212222324252627282930313233343536373839404142\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a Special character Validation for vault Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "460e8011-7982-415b-9ba1-c536b8ca81d3",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e5abeaf-0d6c-4410-b858-164cd81f55d7",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"TEST_12/14\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a  Only letter validation for VaultKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4d5abc9b-1bdc-411d-8e1f-7f7f8094b9d5",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2a278401-eafd-4c1a-b3f2-e132bc1c3723",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Vaultkey passed with only Letter value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Vault_Without_FEE Copy",
			"item": [
				{
					"name": "postive case",
					"item": [
						{
							"name": "VaultCreateCCRecord for Amex cardnumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b75e4017-5b98-4d28-a701-74c1801ec6a7",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faf4c844-4d21-426f-92ef-69f7eb244baf",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",   \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "VaultCreateCCRecord for  Visa  Cardnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8aa6d164-84fa-4b38-b873-3d79b94c7459",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "295474db-0469-4cb7-8467-46d5175d67d8",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "VaultCreateCCRecord for Master Cardnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae9adb01-c9a2-491b-a65d-5e317cd8335a",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"                   raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99c3893b-ce53-4277-8106-5fa8f772c4e4",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n       \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						},
						{
							"name": "VaultCreateCCRecord  for  Discover Cardnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3995a83-6cf6-40a0-8b8d-6e523278d555",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"             \r",
											"\r",
											"\r",
											"\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75095f19-8934-422b-9304-798412bf51fa",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
											"      pm.expect(jsonData.id).not.to.be.null;   \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
											"       pm.expect(jsonData.isError).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
											"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
											"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
											"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
											"    pm.expect(jsonData.isSuccess).to.be.eql(true)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
											"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"   "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGW",
										"Gateway",
										"Transaction",
										"VaultCreateCCRecord"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative case",
					"item": [
						{
							"name": "Country validation",
							"item": [
								{
									"name": "Country as passing as numeric vaule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aec43635-c082-4c71-b030-644f2b59f0c3",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5cca716b-1f50-4347-8a60-2f66f6ce8534",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when country passed with numeric value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"Country should not be numeric\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"2554554\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "be487fe2-8aa8-435a-b384-352b3488cb4c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "82a094b4-86f0-458b-91a1-64dcc78e1af7",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when country passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Country is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country passing as  shortcode validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d91887b-f365-4bd8-a355-365ed3568983",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f759d49-7fcc-46c9-b424-2dbad6421f6f",
												"exec": [
													"var jsonReq = JSON.parse(pm.request.body);\r",
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify country is passed with its shortcode(2 digit)\", function () {\r",
													"   var abbr= jsonReq.ownerCountry;\r",
													"    pm.expect(abbr).lengthOf(2)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when country passed with shortcode  \", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Country not displayed with its short code\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"United States\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Zipcode Validation",
							"item": [
								{
									"name": "Zipcode passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "650a657b-493f-4ce6-8968-01bc34ae9ee4",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eddea984-7971-4d60-9ddd-31ca96aae78f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Zipcode passing as String Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6878f49-e8d7-4d98-af7d-c2893d7cc25d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1e3cc49d-c4f4-4b50-8f27-d4d06ab5bcae",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when zipcode passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal code should be numeric\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"NewYork\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Zipcode passing as Max value ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "26f6725d-b6f0-4cdc-b6eb-1f4306041b7a",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "224d2db3-b116-46f6-a0be-247069c76d3f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when zipcode entered with more than 10 character\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Postal Code exceeds limit of 10 characters\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"1234567-12345\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "State validation",
							"item": [
								{
									"name": "State passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6fc098f0-61cc-4b9b-911f-0bc1e4633873",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77ac7afa-2e70-4d97-ae0f-7579979b0cbf",
												"exec": [
													"var responseData = pm.response.json();\r",
													"pm.test(request.name+\": Verify whether success response is appear when state passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"State is required\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "State passing as Numeric value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ca0e0fbe-f856-41ef-a1cf-1c021b26d45c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51396203-4520-46d0-aaa4-2ee83d8328fa",
												"exec": [
													"var responseData = pm.response.json();\r",
													"pm.test(request.name+\": Verify whether success response is appear when state passed with numeric value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with numeric  value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"State should not be numeric\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n       \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"54444\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "State passing as EmptySpace ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c8cdf854-82f8-454a-92f3-63623460d93f",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9ce72f7f-0ad4-40ba-a32d-76f1ab3c315f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"State is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"            \",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "State passing as Shortcode validation ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "58020e67-8b0b-479e-b687-7277a7eef673",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e4d93089-1477-4f7e-abc2-206ce677ab6f",
												"exec": [
													"var jsonReq = JSON.parse(pm.request.body);\r",
													"var responseData = pm.response.json();\r",
													"//var jsonReq = (pm.request.body).toJSON();\r",
													"console.log(jsonReq);\r",
													"\r",
													"pm.test(request.name+\":  Verify state is passed with its shortcode(2 digit)\", function () {\r",
													"   var abbr= jsonReq.ownerState;\r",
													"    pm.expect(abbr).lengthOf(2)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when state passed with shortcode value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"State not displayed with its short code\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"Texasnewyork\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "City Validation",
							"item": [
								{
									"name": "City passing as Empty value ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fea18207-41aa-4a01-8cc8-2582a0063e78",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"        raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d320448-9afd-4f4d-96d8-e97ef66f1438",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "City passing as Numeric Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "37d1b818-9f12-4aaa-82b9-88712642c72a",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed7ddf78-c61f-4188-9f40-805700e9f03e",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with numeric value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with numeric value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City should not be numeric\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"455421213\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "City passing as Emptyspace ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "db1f54d7-ca51-4ee8-ae93-92e017c7ca6d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "efd9e346-fab2-460d-a8ae-e7c042c1114c",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when city passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"  \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City is required.\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"        \",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "City passing as Max more then 100 Value ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "594fa415-a42e-491f-8ca5-6a9bd5c3e5bf",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4fe79ac6-da60-44d4-ad02-5b7763900773",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when city passed with Max value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"City exceeds limit of 100 characters\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\" new york Taumatawhakatangihangakoauauotamateaturipukakapikimaungahoronukupokaiwhenuakitanatahu North Island, New Zealand\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Street Validation",
							"item": [
								{
									"name": "Street passing as Empty vaule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "06d6fe3d-a646-43a5-9013-63f4e167e45b",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "52f5440a-f018-45ed-bdc3-4cc6d05b765d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when street 1 passed with empty value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"Street is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street Passing as Emptyspace value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67420677-7e3c-45c5-898a-359316db096d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e73df964-3410-44a8-96dd-7e71e9ab5575",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when street 1 passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures.message).contains(\"Street is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"                 \",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Name Validation",
							"item": [
								{
									"name": "Name Passing as Empty vaule",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f66d8e96-84e7-4387-b8de-8871f32d8834",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c7974230-ba5d-42b6-a7db-074250c9b1a1",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Name Passing as Emptyspace ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c16938f-d10e-4f69-8349-97f1a6ab9ee7",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e77fd65d-ea18-47e1-8418-6a23a7726fe9",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify whether success response is appear when ownerName passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.data.id).to.be.empty;\r",
													"   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when ownerName passed with emptyspace value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Name is required\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"           \",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Merchant Key validation",
							"item": [
								{
									"name": "Merchant key passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e71bc105-f70c-445b-b505-054d714bb771",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"              raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3dcb2365-51fc-4d22-9889-9d8af540d0e3",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Merchant key passing as Invalid Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6733bda6-3efb-4979-bb14-e390a247d045",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "736f0c02-4377-400f-9bcb-20a3a28f2078",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"12312454564564654\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Processor ID validation",
							"item": [
								{
									"name": "Processor ID passing as Empty value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0623777d-8e1f-448f-aded-5da59f1778ad",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d1b29fe1-371c-47e6-ae9a-3cbc8a7ecd81",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with invalid value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Processor Id passing as Invalid Processor ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "231834ea-70d7-45c6-846a-03519cc34799",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c6efa29d-ce9c-4c89-9f0e-2460f398eee5",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when processor id passed with invalid value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"123123\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cryptogram Validation",
							"item": [
								{
									"name": "Passing Invalid cryptogram",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69b5d36b-398a-4ca5-8c7f-eed4f6d92031",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify there should not be error Message \", function () {\r",
													"    pm.expect(jsonData.errorMessage).to.be.equal();\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify validationHasFailed is should be false \", function () {\r",
													"       pm.expect(jsonData.validationHasFailed).to.be.eql(false)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify there should not be validationFailures Message \", function () {\r",
													"    pm.expect(jsonData.validationFailures).not.to.be.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":Verify the issuccess should be  True\",function(){\r",
													"    pm.expect(jsonData.isSuccess).to.be.eql(false)\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(request.name+\":Verify the action should be  VaultCreateCreditCardRecord\",function(){\r",
													"    pm.expect(jsonData.action).to.be.eql(\"VaultCreateCreditCardRecord\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c567f26-876e-4a17-bdc7-6d9e56eff6cf",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\":\"{{$randomInt}}{{$randomFirstName}}\",   \r\n    \"creditCardCryptogram\": \"AAAA0000017K158DZ95FIR5U\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://secure-qa.goemerchant.com/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"protocol": "https",
											"host": [
												"secure-qa",
												"goemerchant",
												"com"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cryptogram Passing as Expired   ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "14364068-6fc8-4ae5-a5f4-169b7c675a75",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22dedf96-5ab5-4120-980c-0d76f69b4f29",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing  Invaild   Transaction Type ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b529ae63-f567-4ce9-8242-baa57ca5b6db",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"achdebit\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f3c23da-3623-434c-95ef-bf33c753d0a8",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing cryptogram as Empty Value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2685fbf6-3f90-46cb-ac22-a7a49f952d0f",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ccd1a035-c177-46f3-8a9c-481917f3d368",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(false)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Credit card number is required\");\r",
													"    pm.expect(responseData.validationFailures[1].message).contains(\"Credit Card expiration month is required\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "PAssing Incorrect cryptogram value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec841857-ad40-49cc-8e51-f018ad83e31f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"1234567890ASHHHHHHHHKL\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing  a Incorrect Transcenter ID ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7c4b4b92-c50a-4feb-83bd-c565b877f66d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"          raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e4ae7ee-cea4-459d-8c8b-7d56b1341166",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "VaultCreateCCRecord  passing Incorrect ProcessorID Without Fee",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "06ff5846-30dc-4be9-8ad6-eff542001d34",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dbef79e0-6116-4cde-a3c8-f20ffefd4e5d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Unable to retrieve merchant information\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "VaultCreateCCRecord passing as Incorrect ProcessorId ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "619dfeba-5e9a-49cd-93f4-e63a0a9c7741",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bd9e6fb7-64bc-42f4-b018-092f37c54bb5",
												"exec": [
													"var responseData = pm.response.json();\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Unable to retrieve merchant information\");\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Vault key Validation",
							"item": [
								{
									"name": "Passing  a Empty Vaultkey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f997b96-46ac-423e-bab2-6e5a947ae1fd",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f3b48aee-e377-426f-82da-e73d1973084f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a Emptyspace vaultkey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "950dadf9-ff49-4f8f-bde0-54639f7a3911",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"           raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "958a808a-3515-4896-b17d-1f27a224f38d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\":  Verify id is not null  \", function () {\r",
													"      pm.expect(jsonData.id).not.to.be.null;   \r",
													"});\r",
													"\r",
													"pm.test(request.name+\":  Verify iserror is should be false \", function () {\r",
													"       pm.expect(jsonData.isError).to.be.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when emptyspace passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"              \",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a Min Char validation for Vault Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ba744d7f-ccd1-4765-8a37-e4338f818743",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9f248b12-3c11-4c63-8ee0-f481bb4355d8",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"123\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "passing a max char validation for vaultkey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b626647d-9ded-4c54-a867-ef821baeafaa",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"         raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "15d74c3a-3863-4bbb-a229-5814f329d6d9",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"1234567891011121314151617181920212222324252627282930313233343536373839404142\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a Special character Validation for vault Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df5051a2-0aeb-41ad-acd0-afe71bc8412c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "842b8219-aaf6-4f52-ade3-a6f9b580b404",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when ownerName passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n       \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"TEST_12/14\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passing a  Only letter validation for VaultKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "42f1aa31-eb4a-4a49-b93c-2b14fcf36ad9",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"VaultCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"             raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Vault\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Cvv\":\"143\",\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"\r",
													"\r",
													"             \r",
													"\r",
													"\r",
													"\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7d227f5-7f98-4507-bfc2-a6e499ac9304",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Vaultkey passed with only Letter value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Vault key must be 8 to 75 characters and contain a Letter, Number and a Symbol (#$%^*!)\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"vaultKey\": \"{{$randomInt}}{{$randomFirstName}}\",  \r\n    \"creditCardCryptogram\": \"{{cryptogram}}\",\r\n    \"ownerName\":\"{{Name}}\",\r\n    \"ownerStreet\":\"{{Street}}\",\r\n    \"ownerStreet2\":\"{{Street2}}\",\r\n    \"ownerCity\":\"{{City}}\",\r\n    \"ownerState\":\"{{State}}\",\r\n    \"ownerZip\":\"{{Zip}}\",\r\n    \"ownerCountry\":\"{{Country}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGW/Gateway/Transaction/VaultCreateCCRecord",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGW",
												"Gateway",
												"Transaction",
												"VaultCreateCCRecord"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Standalone credit with fee",
			"item": [
				{
					"name": "Positive_CC_Creditonly_withFee",
					"item": [
						{
							"name": "CC_Creditonly_withFee_Visa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44c0bb72-ff5f-4234-b017-29f2a22f1878",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f53c5391-b1c1-4ff9-854c-b66981147f63",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC_Creditonly_withFee_Master",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3153a8ad-2e85-4d60-a226-0e9474eb871c",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d3d1804-1967-4ead-b872-936241ba5140",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"MasterCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC_Creditonly_withFee_Discover",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88b03aba-7dc7-44bc-ac0a-779cc27bb281",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a3ff43f-3000-4324-91c9-ab659bad0571",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"DiscoverCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC_Creditonly_withFee_Amex",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccaa35c6-8364-4217-9905-d898caa20781",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\": To Verify this authResponse is appeared correctly for APPROVED\", function () {\r",
											"    pm.expect(jsonData.authResponse).eql(\"APPROVED\");\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "118e8fc3-1e66-4968-a4ff-7cb24514424f",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "728e8822-d929-4b51-bd42-171d24756130",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27f5f593-e8f9-4416-80dd-b42937569303",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative_CC_Creditonly_withFee",
					"item": [
						{
							"name": "Merchantkey Validation",
							"item": [
								{
									"name": "CC_Creditonly_withFee_Empty MerchantKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "904014cd-bab7-4b7f-a6a5-d6e171a3a76c",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6c86fd83-069b-434d-9cae-78eea48c589f",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Invalid MerchantKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0855740b-e210-49a3-bce6-2101ffeffc22",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "052afc66-5c8a-40bc-bc70-662fdcb060d5",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"b4a7dc8c-b1a0-4dd9-884b-8d09f070gf56\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Processor ID Validation",
							"item": [
								{
									"name": "CC_Creditonly_withFee_Empty Processorid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "366e5247-22fb-4fd9-a98b-7a3e00201e4f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4b735f1-04c8-4ac5-9704-a46d909f1cc1",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Invalid Processorid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c3b4cbc-d276-46a9-b865-e69c1b566ac3",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df91c5be-e2a8-41a4-a319-140844059591",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"215632\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Amount  Validation",
							"item": [
								{
									"name": "CC_Creditonly_withFee_Empty Amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf11ff6a-5e3b-4000-99f0-45aeccc25779",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f661c44f-c012-4a97-92ab-c646985afcfb",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Empty Amount with Empty space",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38c107c0-2c64-41cf-9597-360478e8ed2c",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ef90f5d-9858-4345-9b06-a9497433c9c3",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"       \",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_String amount value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b86dc6b-47f9-4a6e-8962-974af56dc74f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value. Must be all numbers and two decimal digits max.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce60b154-70b1-4ecc-baad-73e9b5f728d3",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"test\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Amount in minus value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "977962d5-1b06-485b-b853-9bfd4f93f369",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9f93fa5c-9cb4-4402-8c2b-1d55499a0863",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"-120\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Max amount value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0f96f62-a0df-4693-82a0-f1ba4b8634aa",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount exceed numeric limit of 9999999.99\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1434b65a-68a2-4906-8009-004e46479795",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"10000000000000000000\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cryptogram Validation",
							"item": [
								{
									"name": "CC_Creditonly_withFee_Cryptogram Expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e47ae98-bb53-42de-8326-6669b49d720d",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7a61a4bc-f8b9-47b4-8aec-3e8b4c4cefaf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Cryptogram with Invalid Transaction Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c51755e0-f2c0-4c19-b3d1-bb8f9c7851a2",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "40566736-e4ab-4a98-ab8f-f8f171f3d003",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Sale\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Cryptogram with Invalid Transaction Type Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9df1a042-db9f-416b-9915-32ed1e9da2c8",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: Failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c510d2cd-89a4-4c0f-ac06-1e4edf80ffcc",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":\"32354656565\",\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_Cryptogram with Invalid ProcessorId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "198c16d2-a63a-4abb-9a4a-eb5adb6603c3",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b81d8c3b-4dcb-4913-8468-7299c4797de9",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":\"187817\",\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withFee_invalid cryptogram",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2685e285-6fe0-457c-b635-74097b1d135b",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71e50436-f36d-4c6b-80ae-939d6d73f78e",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDWithFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDWithFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyWithFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDWithFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"A143000001AREEY#!@#$$$$\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Standalone credit with out fee",
			"item": [
				{
					"name": "Positive_CC_Creditonly_withoutFee",
					"item": [
						{
							"name": "CC_Creditonly_withoutFee_Visa",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faf19c08-32c1-46a8-917b-7155e1c6fa07",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e8f16b9-b99d-4b82-950d-11ead166b50f",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC_Creditonly_withoutFee_Master",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3db6d2c5-4631-45dc-acb4-3c0644023956",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fcef437-f640-4b65-9f3a-cac4a8d8c69e",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"MasterCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC_Creditonly_withoutFee_Discover",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3e4e8c7-4281-4270-8e89-de47564492a4",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "16659395-23b9-47dc-bc11-62cef9aa067b",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"DiscoverCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						},
						{
							"name": "CC_Creditonly_withoutFee_Amex",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9620f2dd-4bb2-4bcc-9d34-33e052e14c8a",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(request.name+\":To Verify authResponse Status as Approved \", function () {\r",
											"    pm.expect(jsonData.data.authResponse).eql(\"APPROVED\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify referenceNumber is not null or empty\", function () {\r",
											"    pm.expect(jsonData.referenceNumber).not.to.be.null;\r",
											"    pm.expect(jsonData.data.referenceNumber).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify orderId is not null or empty\", function () {\r",
											"    pm.expect(jsonData.orderId).not.to.be.null;\r",
											"    pm.expect(jsonData.data.orderId).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify token is not null or empty \", function () {\r",
											"    pm.expect(jsonData.token).not.to.be.null;\r",
											"    pm.expect(jsonData.data.token).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify cardType is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.null;\r",
											"    pm.expect(jsonData.data.cardType).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\":  Verify last4 is not null or Zero \", function () {\r",
											"    pm.expect(jsonData.last4).not.to.be.null;\r",
											"    pm.expect(jsonData.last4).not.eql(\"0000\");\r",
											"});\r",
											"\r",
											"pm.test(request.name+\"Verify maskedPan is not null or empty\", function () {\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.null;\r",
											"    pm.expect(jsonData.data.maskedPan).not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(request.name+\": Verify this response is not with any error\", function () {\r",
											"    pm.expect(jsonData.isError).eql(false);\r",
											"    pm.expect(jsonData.errorMessages).to.be.empty;\r",
											"    pm.expect(jsonData.validationHasFailed).eql(false);\r",
											"    pm.expect(jsonData.validationFailures).to.be.empty;\r",
											"    pm.expect(jsonData.isSuccess).eql(true);\r",
											"\r",
											"});\r",
											"pm.test(request.name+\": To Verify this action is appeared correctly for CreditRetailOnly\", function () {\r",
											"    pm.expect(jsonData.action).eql(\"CreditRetailOnly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "997cdaab-67f8-486e-bc00-3fdafa9d5b70",
										"exec": [
											"pm.environment.set(\"cryptogram\", \"\");\r",
											"pm.sendRequest({\r",
											"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body:{\r",
											"            mode: 'application/json',\r",
											"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"AmexCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
											"            }\r",
											"}, function (err, res) {\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
									"host": [
										"{{EndPoint}}"
									],
									"path": [
										"secure",
										"RestGw",
										"Gateway",
										"Transaction",
										"CreditRetailOnly"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7eb45993-9cfa-42da-8182-b969bff9b84b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9c9fab45-3419-44cf-82be-0e813035f5e1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative_CC_Creditonly_withoutFee",
					"item": [
						{
							"name": "Merchantkey Validation",
							"item": [
								{
									"name": "CC_Creditonly_withoutFee_Empty MerchantKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16463f43-4e64-45d4-81c6-bbe3c6e4488b",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ade160f2-1cdf-43ef-b45f-dee8d679f568",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Invalid MerchantKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f089c0eb-94d8-428b-82ab-8d524dbac497",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "317fd8b5-7ade-4e97-92b2-4c3918c5d9b9",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"b4a7dc8c-b1a0-4dd9-884b-8d09f070gf56\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Processor ID Validation",
							"item": [
								{
									"name": "CC_Creditonly_withoutFee_Empty Processorid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8c81d7f-c7b0-4255-b555-ac4267b8c1f3",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f14cc76a-a462-4221-9c04-0cbe60c11dd3",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Invalid Processorid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88c47ffd-ed2b-4586-ae72-146152dca8da",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error message is appeared when Merchant Key passed with empty value\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"     pm.expect(responseData.errorMessages[0]).contains(\"Unable to retrieve merchant information\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99c94469-f493-4fa0-b05e-cfff76e6074a",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"215632\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Amount  Validation",
							"item": [
								{
									"name": "CC_Creditonly_withoutFee_Empty Amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec5c5469-ce94-41bd-a14c-0829dac631dd",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "361422fd-e1d4-4ed6-8d77-2c56a82a8e0c",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Empty Amount with Empty space",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f56d124-6205-4e6a-b1e5-da9b48e1bcb1",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when amount passed with empty value\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a5ec19a0-707e-4e2b-88cd-9f31a9a68bdf",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"       \",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_String amount value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d30e1793-95b2-459e-a30f-44d66c2246ae",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value. Must be all numbers and two decimal digits max.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca1f177f-4134-4a92-917d-7cc1896beee0",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"test\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Amount in minus value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de6c997-bda4-472d-ae99-5e428255430f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount is not a valid money value\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "af4a4143-9673-459f-99d8-53bf5a9dd05d",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"-120\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Max amount value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a32542eb-62e8-447f-a3e2-a3edebf210df",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify Validation message is appeared when invalid format of amount passed\", function () {\r",
													"    pm.expect(responseData.validationHasFailed).eql(true);\r",
													"    pm.expect(responseData.validationFailures[0].message).contains(\"Amount exceed numeric limit of 9999999.99\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12e33131-ee92-48da-9776-c148f0b26cc2",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"10000000000000000000\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cryptogram Validation",
							"item": [
								{
									"name": "CC_Creditonly_withoutFee_Cryptogram Expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1491a59-7658-4d01-9886-209faaf93d67",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Status code is 403\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: no_longer_valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "800166a5-08ff-4925-9e43-76de703e0f9b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Cryptogram with Invalid Transaction Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f0cbfa9-f876-45fd-b716-e6bc60a5c3a9",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5970a222-0657-4366-b559-d5594e8f2c24",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Sale\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Cryptogram with Invalid Transaction Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebc54c6f-c9ad-4e48-99a9-d1c094211425",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: Failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41069d2b-6b78-46e9-ae90-0267f801e685",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":\"32354656565\",\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_Cryptogram with Invalid ProcessorId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "657003cc-b6d6-4e8a-8040-1fda0fa2459f",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Not Authorized\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dd7cbf71-1ea9-447f-b83e-3bf349d5b28e",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":\"187817\",\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"{{cryptogram}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								},
								{
									"name": "CC_Creditonly_withoutFee_invalid cryptogram",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91584a6e-9c0f-4676-aac7-47757f1d73c0",
												"exec": [
													"var responseData = pm.response.json();\r",
													"\r",
													"pm.test(request.name+\": Verify error is appeared to send to this request\", function () {\r",
													"    pm.expect(responseData.isError).eql(true);\r",
													"    pm.expect(responseData.errorMessages).contains(\"Cryptogram: invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d93e7d9-b57c-41ed-9f1f-51aac2eb051f",
												"exec": [
													"pm.environment.set(\"cryptogram\", \"\");\r",
													"pm.sendRequest({\r",
													"    url:pm.environment.get(\"CreditCyptogramURL\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    },\r",
													"    body:{\r",
													"            mode: 'application/json',\r",
													"            raw: JSON.stringify({\"TranscenterId\":pm.environment.get(\"TransactionCenterIDW/OFee\"),\"ProcessorId\":pm.environment.get(\"CCProcessorIDW/OFee\"),\"TransactionType\":\"Credit\",  \"CardNumber\":pm.globals.get(\"VisaCardNumber\"),\"Cvv\":\"143\",\"ExpMonth\":pm.globals.get(\"ExpMonth\"),\"ExpYear\":pm.globals.get(\"ExpYear\"),\"Amount\":pm.globals.get(\"Amount\"),\"AmountEnabled\":pm.globals.get(\"vaultAmountEnabled\")})\r",
													"            }\r",
													"}, function (err, res) {\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"cryptogram\", res.json().cryptogram);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"merchantKey\":\"{{MerchantKeyW/OFee}}\",\r\n    \"processorId\":\"{{CCProcessorIDW/OFee}}\",\r\n    \"transactionAmount\":\"{{Amount}}\",\r\n    \"creditCardCryptogram\": \"A143000001AREEY#!@#$$$$\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{EndPoint}}/secure/RestGw/Gateway/Transaction/CreditRetailOnly",
											"host": [
												"{{EndPoint}}"
											],
											"path": [
												"secure",
												"RestGw",
												"Gateway",
												"Transaction",
												"CreditRetailOnly"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}